{"version":3,"file":"bundle.js","mappings":"mLAAA,kBACA,YACA,SACA,YACA,YAMMA,GAAM,eAGZA,EAAIC,KAAI,gBACRD,EAAIC,KAAI,aACRD,EAAIC,KAAI,gBAGRD,EAAIC,IAAI,UAAW,WAEnB,UAAeD,C,udCpBf,kBACA,YAEA,SACA,YACA,UAAOE,SAEP,MAAMC,EAAS,UAAQC,SAEvBD,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UACvC,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,uBAEpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrBE,EAAqB,QAAV,EAAAP,aAAG,EAAHA,EAAKI,aAAK,eAAEG,SAG7B,GADAL,QAAQC,IAAII,IACPD,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,GAE5C,GAAKN,GAAuC,QAA3BA,EAASe,cAYnB,CACL,MAAQX,KAAMY,EAAOC,MAAOC,SAAqBL,EAC9CM,KAAK,QACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,WAAYrB,GAElB,GAAIkB,EAGF,OAFAxB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASa,EAAWb,UAGtDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMY,EAAOX,QAAS,WAC7C,KA1BmD,CACjD,MAAQD,KAAMY,EAAOC,MAAOC,SAAqBL,EAC9CM,KAAK,QACLC,SACAC,GAAG,UAAWtB,GACjB,GAAImB,EAGF,OAFAxB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASa,EAAWb,UAGtDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMY,EAAOX,QAAS,WAC7C,CAeF,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAK+B,MAAK,CAAO7B,EAAKC,IAAQ,OAAD,6B,gBACxC,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,uBACnC,IAAI0B,GAAkB,QAAT,EAAA/B,aAAG,EAAHA,EAAK8B,YAAI,eAAEC,QAAgC,WACxD,MAAMzB,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QACpB2B,EAAqB,QAAT,EAAAhC,aAAG,EAAHA,EAAK8B,YAAI,eAAEG,WACvBC,EAAkB,QAAT,EAAAlC,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QACpB5B,EAAoB,QAAT,EAAAP,aAAG,EAAHA,EAAK8B,YAAI,eAAEvB,SAE5B,IAAKD,EAOH,OANAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,yBAIb,IAAKsB,EAOH,OANAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,0CAIb,IAAKL,EAOH,OANAN,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,2CAIb,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMyB,EAAOZ,MAAOa,SAAqBjB,EAC9CM,KAAK,QACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,WAAYrB,GACf+B,KAAK,QAAS,IAAIP,MACrB,GAAIM,EAGF,OAFApC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASyB,EAAWzB,UAGlDwB,GAASA,EAAMG,OAAS,IAC1BR,GAAS,IAAIK,EAAMG,UAErB,MAAQ5B,KAAM6B,EAAShB,MAAOiB,SAAuBrB,EAClDM,KAAK,QACLgB,OAAO,CACNC,GAAIT,EACJD,WAAYD,EACZ3B,QAASC,EACTyB,QACAxB,aAEDoB,SACAiB,SACH,OAAIH,GACFxC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS6B,EAAa7B,YAGxDV,QAAQC,IAAIqC,GACZvC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAM6B,EAAS5B,QAAS,YAE/C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UAC1C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,sBAEpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GAE5B,IAAKrC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMY,EAAOC,MAAOC,SAAqBL,EAC9CM,KAAK,QACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,KAAMM,GACTU,SACH,GAAInB,EAGF,OAFAxB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASa,EAAWb,UAGtDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMY,EAAOX,QAAS,WAC7C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQgD,OAAM,CAAO9C,EAAKC,IAAQ,OAAD,6B,YAC5C,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,wBAEnC,MAAM0B,EAAiB,QAAT,EAAA/B,aAAG,EAAHA,EAAK8B,YAAI,eAAEC,MACnBG,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GACtBrC,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QAE1B,IAAK0B,EAGH,OAFA9B,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,oBAG3C,IAAKN,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMoC,EAAMvB,MAAOwB,SAAoB5B,EAC5CM,KAAK,QACLuB,OAAO,CAAElB,UACTH,GAAG,KAAMM,GACTP,SACAiB,SACH,GAAII,EAGF,OAFA/C,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASoC,EAAUpC,UAGrDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMoC,EAAMnC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQoD,QAAO,CAAOlD,EAAKC,IAAQ,OAAD,6B,UAC7C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,yBACpC,MAAM6B,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GACtBrC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QAE3B,IAAKC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IAEtC,MAAEW,SAAgBJ,EACrBM,KAAK,QACLwB,SACAtB,GAAG,KAAMM,GACTN,GAAG,UAAWtB,GACdsC,SACH,OAAIpB,GACFvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,YAGjDX,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAM,GAAIC,QAAS,YAE1C,CAAE,MAAOY,GAKP,OAJAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAG3C,CACF,MAEA,UAAehB,C,udC5Qf,eACA,YACA,UACA,QAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEjBsD,EAAe,IAAI,EAAAC,aAAa,CACpCC,KAAMpC,QAAQC,IAAIoC,mBAGpB1D,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6BACvC,MAAMsD,QAAoBJ,EAAaK,kBACnCD,GAAeA,EAAYhB,OAAS,GACtCtC,EAAIQ,KAAK8C,EAEb,MAEA,UAAe3D,C,udClBf,kBACA,YACA,YACA,SAMA,YAEA,UAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEvBD,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UACvC,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,6BACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAmB,QAAV,EAAAlC,aAAG,EAAHA,EAAKI,aAAK,eAAE+B,QAC3B,IAAK7B,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,mBACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,UAAWM,GACduB,MAAM,UAAW,CAAEC,WAAW,IACjC,GAAIlC,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAK+B,MAAK,CAAO7B,EAAKC,IAAQ,OAAD,6B,oBACxC,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,6BACnC,MAAMsD,EAAqB,QAAT,EAAA3D,aAAG,EAAHA,EAAK8B,YAAI,eAAE8B,WACvBC,GACM,QAAT,EAAA7D,aAAG,EAAHA,EAAK8B,YAAI,eAAE+B,WAEM,GACdvD,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QACpB6B,EAAkB,QAAT,EAAAlC,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QAC1B,IAAKwB,EAGH,OAFA1D,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,IAAKN,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,oBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAGRC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMoC,EAAMvB,MAAOwB,SAAoB5B,EAC5CM,KAAK,QACLC,SACAC,GAAG,KAAMM,GACTU,SACH,GAAII,EAIF,OAHA9C,QAAQC,IAAI6C,GACZ/C,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASoC,EAAUpC,UAGrD,MAAMkD,EAAef,EAAKxC,UAAY,IAC9BI,KAAMJ,EAAUiB,MAAOuC,SAAwB3C,EACpDM,KAAK,YACLC,SACAC,GAAG,OAAQkC,GACXlB,SACCmB,GACF7D,QAAQC,IAAI4D,GAMd,MAAMC,QAAa,IAAAC,gBACjBN,EACkC,SAApB,QAAd,EAAApD,aAAQ,EAARA,EAAU2D,YAAI,eAAE5C,eACZ,kBACc,QAAd,EAAAf,aAAQ,EAARA,EAAU2D,YAAI,eAAE5C,gBAAiB,IAEjC6C,EAA4B,QAAX,EAAAH,aAAI,EAAJA,EAAMI,GAAG,UAAE,eAAEC,KAAKC,GAAQA,aAAG,EAAHA,EAAKC,QAAQ,KAAM,OACpErE,QAAQC,IAAIgE,GACZ,MAAMK,QAA4B,IAAAC,oBAAmBd,GACrDzD,QAAQC,IAAIqE,GACZ,MAAME,QAAiB,UAAM7C,KAC3B,6CACA,CACE8C,MAAO,sBACPd,SAAU,IACLA,EACH,CACE7C,KAAM,SACN4D,UACGrE,aAAQ,EAARA,EAAUsE,mBACT,4iCACF,4BAESC,KAAKC,UAAUZ,yCACZW,KAAKC,UAAUP,iCAG/B,CAAExD,KAAM,OAAQ4D,QAASjB,IAE3BqB,aAAazE,aAAQ,EAARA,EAAU0E,yBAA0B,IAEnD,CACEC,QAAS,CACPC,cAAe,UAAUlE,QAAQC,IAAIkE,oBAI3C,GAAwB,MAApBV,EAASlE,OAkCX,OAHAN,QAAQC,IAAIuE,EAASW,YACrBpF,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS8D,EAASW,aAjCvB,CAC3B,MAAMC,EAAiBZ,EAAS/D,MAC1B,KAAEA,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,mBACLgB,OAAO,CACNC,GAAI2C,EAAe3C,GACnB4C,OAAQD,EAAeC,OACvBC,QAASF,EAAeE,QACxBb,MAAOW,EAAeX,MACtB3D,KAAMsE,EAAeG,QAAQ,GAAG7E,QAAQI,KACxCJ,QAAS0E,EAAeG,QAAQ,GAAG7E,QAAQgE,QAC3Cc,cAAeJ,EAAeG,QAAQ,GAAGC,cACzCC,cAAeL,EAAeM,MAAMD,cACpCE,kBAAmBP,EAAeM,MAAMC,kBACxCC,aAAcR,EAAeM,MAAME,aACnCzF,QAASC,EACT6B,QAASD,EACT6D,OAAQpC,EACRqC,UAAW7B,IAEZxC,SACAiB,SACH,GAAIpB,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAMF,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,YAC1C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,4BACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAmB,QAAV,EAAAlC,aAAG,EAAHA,EAAKI,aAAK,eAAE+B,QACrB8D,EAA0B,QAAX,EAAAjG,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GAClC,IAAKrC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,mBACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,UAAWM,GACdN,GAAG,KAAMqE,GACTrD,SACH,GAAIpB,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEA,UAAehB,C,udC7Of,kBACA,YAEA,SACA,YACA,UAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEvBD,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,YACvC,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,0BACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB4F,EAAyB,QAAV,EAAAjG,aAAG,EAAHA,EAAKI,aAAK,eAAE8F,cAC3BhE,EAAmB,QAAV,EAAAlC,aAAG,EAAHA,EAAKI,aAAK,eAAE+B,QAE3B,IAAK7B,EAOH,OANAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,UAAMwF,EACNvF,QAAS,yBAIb,IAAKqF,EAOH,OANAhG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,UAAMwF,EACNvF,QAAS,+BAIb,IAAKsB,EAOH,OANAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,UAAMwF,EACNvF,QAAS,oBAIb,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,uBACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,gBAAiBqE,GACpBrE,GAAG,UAAWM,GACjB,GAAKV,EAKH,MAAM,IAAI4E,MAAM5E,EAAMZ,SAFtB,OAFAX,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAK9C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAK+B,MAAK,CAAO7B,EAAKC,IAAQ,OAAD,6B,oBACxC,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,2BACnC,MAAMC,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QACpB4F,EAAwB,QAAT,EAAAjG,aAAG,EAAHA,EAAK8B,YAAI,eAAEoE,cAC1BhE,EAAkB,QAAT,EAAAlC,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QACpBkE,EAAoB,QAAT,EAAArG,aAAG,EAAHA,EAAK8B,YAAI,eAAEwE,UACtBC,EAAkB,QAAT,EAAAvG,aAAG,EAAHA,EAAK8B,YAAI,eAAEyE,OACpBR,EAAkB,QAAT,EAAA/F,aAAG,EAAHA,EAAK8B,YAAI,eAAEiE,OACpBS,EAAsB,QAAT,EAAAxG,aAAG,EAAHA,EAAK8B,YAAI,eAAE0E,WAC9B,IAAKtE,EAOH,OANAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,oBAIb,IAAKN,EAOH,OANAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,yBAIb,IAAKyF,EAOH,OANApG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,0BAIb,IAAK2F,EAOH,OANAtG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,uBAIb,IAAKqF,EAOH,OANAhG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,8BAIb,IAAK4F,EAOH,OANAvG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,2BAIb,IAAKmF,EAOH,OANA9F,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,uBAIb,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,uBACLgB,OAAO,CACN,CACErC,QAASC,EACTqC,GAAI0D,EACJlE,QAASD,EACTgE,cAAeD,EACfhE,YAAY,IAAIwE,MAAOC,cACvBH,SACAR,SACAS,gBAGH7E,SACAiB,SACH,GAAIjC,EAGF,OAFAV,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,YAG5C,GAAIY,EACF,MAAM,IAAI4E,MAAM5E,EAAMZ,QAE1B,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAKoD,QAAO,CAAOlD,EAAKC,IAAQ,OAAD,6B,YAC1C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,6BACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB4F,EAAyB,QAAV,EAAAjG,aAAG,EAAHA,EAAKI,aAAK,eAAE8F,cAC3BhE,EAAmB,QAAV,EAAAlC,aAAG,EAAHA,EAAKI,aAAK,eAAE+B,QAE3B,IAAK7B,EAOH,OANAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,yBAIb,IAAKqF,EAOH,OANAhG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,+BAIb,IAAKsB,EAOH,OANAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,oBAIb,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,MAAEW,SAAgBJ,EACrBM,KAAK,uBACLwB,SACAtB,GAAG,UAAWtB,GACdsB,GAAG,gBAAiBqE,GACpBrE,GAAG,UAAWM,GACdU,SACH,IAAKpB,EAGH,OAFAvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAM,GAAIC,QAAS,YAG1C,GAAIY,EACF,MAAM,IAAI4E,MAAM5E,EAAMZ,QAE1B,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEA,UAAehB,C,sdCjPf,kBACA,YAEA,SACA,YAEA,UAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEvBD,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UACvC,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,+BACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrBsG,EAAyB,QAAV,EAAA3G,aAAG,EAAHA,EAAKI,aAAK,eAAEuG,aAEjC,IAAKrG,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAK+F,EAGH,OAFA1G,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,6BAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMY,EAAOC,MAAOC,SAAqBL,EAC9CM,KAAK,gBACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,eAAgB+E,GACnBlD,MAAM,aAAc,CAAEC,WAAW,IACpC,GAAIjC,EAGF,OAFAxB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASa,EAAWb,UAGtDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMY,EAAOX,QAAS,WAC7C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAK+B,MAAK,CAAO7B,EAAKC,IAAQ,OAAD,6B,gBACxC,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,+BAEnC,IAAI0B,GAAkB,QAAT,EAAA/B,aAAG,EAAHA,EAAK8B,YAAI,eAAEC,QAAgC,WACxD,MAAMzB,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QACpB2B,EAAqB,QAAT,EAAAhC,aAAG,EAAHA,EAAK8B,YAAI,eAAEG,WACvBC,EAAkB,QAAT,EAAAlC,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QACpBwE,EAAwB,QAAT,EAAA3G,aAAG,EAAHA,EAAK8B,YAAI,eAAE6E,aAEhC,IAAKrG,EAOH,OANAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,yBAIb,IAAKsB,EAOH,OANAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,oBAIb,IAAK+F,EAOH,OANA1G,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,6BAIb,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IAEpCF,KAAMyB,EAAOZ,MAAOa,SAAqBjB,EAC9CM,KAAK,gBACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,eAAgB+E,GACnBrE,KAAK,QAAS,IAAIP,MACrB,GAAIM,EAGF,OAFApC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASyB,EAAWzB,UAGlDwB,GAASA,EAAMG,OAAS,IAC1BR,GAAS,IAAIK,EAAMG,UAErB,MAAQ5B,KAAM6B,EAAShB,MAAOiB,SAAuBrB,EAClDM,KAAK,gBACLgB,OAAO,CACNC,GAAIT,EACJD,WAAYD,EACZ3B,QAASC,EACTqG,eACA5E,UAEDJ,SACAiB,SACH,OAAIH,GACFxC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS6B,EAAa7B,YAGxDX,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAM6B,EAAS5B,QAAS,YAE/C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UAC1C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,8BAEpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GAE5B,IAAKrC,EAIH,OAHAJ,QAAQC,IAAI,uBACZF,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMY,EAAOC,MAAOC,SAAqBL,EAC9CM,KAAK,gBACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,KAAMM,GACTU,SACH,GAAInB,EAIF,OAHAvB,QAAQC,IAAIsB,EAAWb,SACvBX,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASa,EAAWb,UAGtDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMY,EAAOX,QAAS,WAC7C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQgD,OAAM,CAAO9C,EAAKC,IAAQ,OAAD,6B,UAC5C,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,gCAEnC,MAAM0B,EAAiB,QAAT,EAAA/B,aAAG,EAAHA,EAAK8B,YAAI,eAAEC,MACnBG,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GACtBrC,EAASN,aAAG,EAAHA,EAAK8B,KAAKzB,QAEzB,IAAK0B,EAGH,OAFA9B,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,oBAG3C,IAAKN,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMoC,EAAMvB,MAAOwB,SAAoB5B,EAC5CM,KAAK,gBACLuB,OAAO,CAAElB,UACTH,GAAG,KAAMM,GACTP,SACAiB,SACH,GAAII,EAGF,OAFA/C,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASoC,EAAUpC,UAGrDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMoC,EAAMnC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQoD,QAAO,CAAOlD,EAAKC,IAAQ,OAAD,6B,UAC7C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,kCACpC,MAAM6B,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GACtBrC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QAE3B,IAAKC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IAEtC,MAAEW,SAAgBJ,EACrBM,KAAK,gBACLwB,SACAtB,GAAG,KAAMM,GACTN,GAAG,UAAWtB,GACdsC,SACH,OAAIpB,GACFtB,QAAQC,IAAIF,GACZA,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,YAGjDX,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAM,GAAIC,QAAS,YAE1C,CAAE,MAAOY,GAKP,OAJAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAG3C,CACF,MAEA,UAAehB,C,udCrQf,eACA,YACA,YACA,YACA,SAEA,YACA,UAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEF,IAAI,EAAAuD,aAAa,CACpCC,KAAMpC,QAAQC,IAAIoC,mBAEG,IAAI,EAAAsD,wBAAwB,CACjDC,eAAgB5F,QAAQC,IAAIkE,iBAkB9BxF,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UACvC,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,qCACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAmB,QAAV,EAAAlC,aAAG,EAAHA,EAAKI,aAAK,eAAE+B,QAC3B,IAAK7B,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,MAAMC,EAAQ,UAAIC,KAAK,CAAEC,IAAKT,EAAQU,KAAM,iBAAmBC,QAAQC,IAAIC,qBACrEC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAASM,KAAK,2BAA2BC,SAASC,GAAG,UAAWtB,GAAQsB,GAAG,UAAWM,GAAQuB,MAAM,UAAW,CAAEC,WAAW,IAC1J,GAAIlC,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAK+B,MAAK,CAAO7B,EAAKC,IAAQ,OAAD,6B,sBACxC,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,qCACnC,MAAMyG,EAA2B,QAAT,EAAA9G,aAAG,EAAHA,EAAK8B,YAAI,eAAE+C,iBAC7BlB,EAAqB,QAAT,EAAA3D,aAAG,EAAHA,EAAK8B,YAAI,eAAE8B,WACvBC,GAAqB,QAAT,EAAA7D,aAAG,EAAHA,EAAK8B,YAAI,eAAE+B,WAAgE,GACvFvD,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QACpB6B,EAAkB,QAAT,EAAAlC,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QACpB6C,EAAuB,QAAT,EAAAhF,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QACzBwE,EAAwB,QAAT,EAAA3G,aAAG,EAAHA,EAAK8B,YAAI,eAAE6E,aAChC,IAAKhD,EAGH,OAFA1D,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,IAAKN,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,oBAG3C,IAAK+F,EAGH,OAFA1G,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,6BAG3C,MAAMC,EAAQ,UAAIC,KAAK,CAAEC,IAAKT,EAAQU,KAAM,iBAAmBC,QAAQC,IAAIC,qBACrEC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,GAEtCmD,QAAa,IAAAC,gBAAeN,EAAWgD,GACvCxC,EAA4B,QAAX,EAAAH,aAAI,EAAJA,EAAMI,GAAG,UAAE,eAAEC,KAAKC,GAAQA,aAAG,EAAHA,EAAKC,QAAQ,KAAM,OACpErE,QAAQC,IAAIgE,GACZ,MAAM4C,EAAyB,qEAAqEJ,0cAEzF7B,KAAKC,UAAUZ,eAEpBO,QAAiB,UAAM7C,KAC3B,6CACA,CACE8C,MAAO,sBACPd,SAAU,IACLA,EACH,CACE7C,KAAM,SACN4D,QAASkC,EAAkBA,EAAkB3C,EAAiB4C,GAEhE,CAAE/F,KAAM,OAAQ4D,QAASjB,IAE3BqB,YAAaA,EAAcgC,OAAOhC,GAAe,IAEnD,CACEE,QAAS,CACPC,cAAe,UAAUlE,QAAQC,IAAIkE,oBAI3C,GAAwB,MAApBV,EAASlE,OAmCX,OAHAN,QAAQC,IAAIuE,EAASW,YACrBpF,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS8D,EAASW,aAlCvB,CAC3B,MAAMC,EAAiBZ,EAAS/D,MAE1B,KAAEA,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,2BACLuF,OAAO,CACNtE,GAAI2C,EAAe3C,GACnB4C,OAAQD,EAAeC,OACvBC,QAASF,EAAeE,QACxBb,MAAOW,EAAeX,MACtB3D,KAAMsE,EAAeG,QAAQ,GAAG7E,QAAQI,KACxCJ,QAAS0E,EAAeG,QAAQ,GAAG7E,QAAQgE,QAC3Cc,cAAeJ,EAAeG,QAAQ,GAAGC,cACzCC,cAAeL,EAAeM,MAAMD,cACpCE,kBAAmBP,EAAeM,MAAMC,kBACxCC,aAAcR,EAAeM,MAAME,aACnCzF,QAASC,EACT6B,QAASD,EACT6D,OAAQpC,EACRqC,UAAW7B,IAEZxC,SACAiB,SACH,GAAIpB,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAMF,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,YAC1C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,oCACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GACtBsD,EAA0B,QAAX,EAAAjG,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GAClC,IAAKrC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,MAAMC,EAAQ,UAAIC,KAAK,CAAEC,IAAKT,EAAQU,KAAM,iBAAmBC,QAAQC,IAAIC,qBACrEC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAASM,KAAK,2BAA2BC,SAASC,GAAG,UAAWtB,GAAQsB,GAAG,UAAWM,GAAQN,GAAG,KAAMqE,GAAcrD,SACnJ,GAAIpB,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEA,UAAehB,C,2JC/Mf,kBACA,YACA,YACA,YACA,WACA,YACA,YACA,YACA,WAEMA,EAAS,UAAQC,SAKvBD,EAAOG,IAAI,WAAW,CAACC,EAAKC,IAAQA,EAAIQ,KAAK,QAC7Cb,EAAOF,IAAI,cAAe,WAC1BE,EAAOF,IAAI,cAAe,WAC1BE,EAAOF,IAAI,QAAS,WACpBE,EAAOF,IAAI,gBAAiB,WAC5BE,EAAOF,IAAI,sBAAuB,WAClCE,EAAOF,IAAI,YAAa,WACxBE,EAAOF,IAAI,UAAW,WACtBE,EAAOF,IAAI,YAAa,WAExB,UAAeE,C,sdCzBf,kBACA,YAEA,SACA,YAEA,UAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEvBD,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,QACvC,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,4BACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QAE3B,IAAKC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMuG,EAAY1F,MAAO2F,SAA0B/F,EACxDM,KAAK,YACLC,OAAO,KACP8B,MAAM,aAAc,CAAEC,WAAW,IACpC,GAAIyD,EAGF,OAFAlH,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASuG,EAAgBvG,UAG3DV,QAAQC,IAAI+G,GACZjH,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMuG,EAAYtG,QAAS,WAClD,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEA,UAAehB,C,udC7Cf,kBACA,YAEA,SACA,YACA,UAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEvBD,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,QACvC,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,8BAEpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QAE3B,IAAKC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IAEpCF,KAAMY,EAAOC,MAAOC,SAAqBL,EAC9CM,KAAK,eACLC,SACAC,GAAG,UAAWtB,GAEjB,GAAImB,EAGF,OAFAxB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASa,EAAWb,UAGtDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMY,EAAOX,QAAS,WAC7C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAK+B,MAAK,CAAO7B,EAAKC,IAAQ,OAAD,6B,cACxC,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,8BACnC,IAAI0B,GAAkB,QAAT,EAAA/B,aAAG,EAAHA,EAAK8B,YAAI,eAAEC,QAAgC,WACxD,MAAMzB,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QACpB2B,EAAqB,QAAT,EAAAhC,aAAG,EAAHA,EAAK8B,YAAI,eAAEG,WACvBC,EAAkB,QAAT,EAAAlC,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QAE1B,IAAK7B,EAOH,OANAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,yBAIb,IAAKsB,EAOH,OANAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,oBAIb,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMyB,EAAOZ,MAAOa,SAAqBjB,EAC9CM,KAAK,eACLC,SACAC,GAAG,UAAWtB,GACdgC,KAAK,QAAS,IAAIP,MACrB,GAAIM,EAGF,OAFApC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASyB,EAAWzB,UAGlDwB,GAASA,EAAMG,OAAS,IAC1BR,GAAS,IAAIK,EAAMG,UAErB,MAAQ5B,KAAM6B,EAAShB,MAAOiB,SAAuBrB,EAClDM,KAAK,eACLgB,OAAO,CAAEC,GAAIT,EAAQD,WAAYD,EAAW3B,QAASC,EAAQyB,UAC7DJ,SACAiB,SACH,OAAIH,GACFxC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS6B,EAAa7B,YAGxDX,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAM6B,EAAS5B,QAAS,YAE/C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UAC1C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,6BAEpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GAE5B,IAAKrC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMY,EAAOC,MAAOC,SAAqBL,EAC9CM,KAAK,eACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,KAAMM,GACTU,SACH,GAAInB,EAGF,OAFAxB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASa,EAAWb,UAGtDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMY,EAAOX,QAAS,WAC7C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQgD,OAAM,CAAO9C,EAAKC,IAAQ,OAAD,6B,YAC5C,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,+BAEnC,MAAM0B,EAAiB,QAAT,EAAA/B,aAAG,EAAHA,EAAK8B,YAAI,eAAEC,MACnBG,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GACtBrC,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QAE1B,IAAK0B,EAGH,OAFA9B,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,oBAG3C,IAAKN,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMoC,EAAMvB,MAAOwB,SAAoB5B,EAC5CM,KAAK,eACLuB,OAAO,CAAElB,UACTH,GAAG,KAAMM,GACTP,SACAiB,SACH,GAAII,EAGF,OAFA/C,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASoC,EAAUpC,UAGrDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMoC,EAAMnC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQoD,QAAO,CAAOlD,EAAKC,IAAQ,OAAD,6B,UAC7C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,gCACpC,MAAM6B,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GACtBrC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QAE3B,IAAKC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IAEtC,MAAEW,SAAgBJ,EACrBM,KAAK,eACLwB,SACAtB,GAAG,KAAMM,GACTN,GAAG,UAAWtB,GACdsC,SACH,OAAIpB,GACFtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,YAGjDX,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAM,GAAIC,QAAS,YAE1C,CAAE,MAAOY,GAKP,OAJAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAG3C,CACF,MAEA,UAAehB,C,udC1Of,eACA,YACA,UACA,QAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEjBsD,EAAe,IAAI,EAAAC,aAAa,CACpCC,KAAMpC,QAAQC,IAAIkG,sBAGpBxH,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6BACvC,MAAMsD,QAAoBJ,EAAaK,kBACnCD,GAAeA,EAAYhB,OAAS,EACtCtC,EAAIQ,KAAK8C,GAGXtD,EAAIQ,KAAK,uBAEX,MAEA,UAAeb,C,udCpBf,kBACA,YAEA,YACA,SAEA,YACA,UAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEvBD,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UACvC,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,oCACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAmB,QAAV,EAAAlC,aAAG,EAAHA,EAAKI,aAAK,eAAE+B,QAC3B,IAAK7B,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,0BACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,UAAWM,GACduB,MAAM,UAAW,CAAEC,WAAW,IACjC,GAAIlC,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAK+B,MAAK,CAAO7B,EAAKC,IAAQ,OAAD,6B,cACxC,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,oCACnC,MAAMsD,EAAqB,QAAT,EAAA3D,aAAG,EAAHA,EAAK8B,YAAI,eAAE8B,WACvBC,GACM,QAAT,EAAA7D,aAAG,EAAHA,EAAK8B,YAAI,eAAE+B,WAEM,GACdvD,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QACpB6B,EAAkB,QAAT,EAAAlC,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QAC1B,IAAKwB,EAGH,OAFA1D,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,IAAKN,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,oBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,GACtC6D,QAAiB,UAAM7C,KAC3B,6CACA,CACE8C,MAAO,sBACPd,SAAU,IACLA,EACH,CACE7C,KAAM,SACN4D,QAAS,+BAEX,CAAE5D,KAAM,OAAQ4D,QAASjB,KAG7B,CACEuB,QAAS,CACPC,cAAe,UAAUlE,QAAQC,IAAIkE,oBAI3C,GAA4B,OAAxBV,EAASW,WAiCX,OAHAnF,QAAQC,IAAIuE,EAASW,YACrBpF,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS8D,EAASW,aAhClB,CAChC,MAAMC,EAAiBZ,EAAS/D,MAC1B,KAAEA,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,0BACLgB,OAAO,CACNC,GAAI2C,EAAe3C,GACnB4C,OAAQD,EAAeC,OACvBC,QAASF,EAAeE,QACxBb,MAAOW,EAAeX,MACtB3D,KAAMsE,EAAeG,QAAQ,GAAG7E,QAAQI,KACxCJ,QAAS0E,EAAeG,QAAQ,GAAG7E,QAAQgE,QAC3Cc,cAAeJ,EAAeG,QAAQ,GAAGC,cACzCC,cAAeL,EAAeM,MAAMD,cACpCE,kBAAmBP,EAAeM,MAAMC,kBACxCC,aAAcR,EAAeM,MAAME,aACnCzF,QAASC,EACT6B,QAASD,EACT6D,OAAQpC,IAEThC,SACAiB,SACH,GAAIpB,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAMF,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,YAC1C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,mCACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAmB,QAAV,EAAAlC,aAAG,EAAHA,EAAKI,aAAK,eAAE+B,QACrB8D,EAA0B,QAAX,EAAAjG,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GAClC,IAAKrC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,0BACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,UAAWM,GACdN,GAAG,KAAMqE,GACTrD,SACH,GAAIpB,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEA,UAAehB,C,udC9Lf,kBACA,YAEA,SACA,YACA,UAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEvBD,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,YACvC,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,iCACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB4F,EAAyB,QAAV,EAAAjG,aAAG,EAAHA,EAAKI,aAAK,eAAE8F,cAC3BhE,EAAmB,QAAV,EAAAlC,aAAG,EAAHA,EAAKI,aAAK,eAAE+B,QAE3B,IAAK7B,EAOH,OANAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,UAAMwF,EACNvF,QAAS,yBAIb,IAAKqF,EAOH,OANAhG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,UAAMwF,EACNvF,QAAS,+BAIb,IAAKsB,EAOH,OANAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,UAAMwF,EACNvF,QAAS,oBAIb,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,8BACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,gBAAiBqE,GACpBrE,GAAG,UAAWM,GACjB,GAAKV,EAKH,MAAM,IAAI4E,MAAM5E,EAAMZ,SAFtB,OAFAX,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAK9C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAK+B,MAAK,CAAO7B,EAAKC,IAAQ,OAAD,6B,oBACxC,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,kCACnC,MAAMC,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QACpB4F,EAAwB,QAAT,EAAAjG,aAAG,EAAHA,EAAK8B,YAAI,eAAEoE,cAC1BhE,EAAkB,QAAT,EAAAlC,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QACpBkE,EAAoB,QAAT,EAAArG,aAAG,EAAHA,EAAK8B,YAAI,eAAEwE,UACtBC,EAAkB,QAAT,EAAAvG,aAAG,EAAHA,EAAK8B,YAAI,eAAEyE,OACpBR,EAAkB,QAAT,EAAA/F,aAAG,EAAHA,EAAK8B,YAAI,eAAEiE,OACpBS,EAAsB,QAAT,EAAAxG,aAAG,EAAHA,EAAK8B,YAAI,eAAE0E,WAC9B,IAAKtE,EAOH,OANAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,oBAIb,IAAKN,EAOH,OANAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,yBAIb,IAAKyF,EAOH,OANApG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,0BAIb,IAAK2F,EAOH,OANAtG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,uBAIb,IAAKqF,EAOH,OANAhG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,8BAIb,IAAK4F,EAOH,OANAvG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,2BAIb,IAAKmF,EAOH,OANA9F,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,uBAIb,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,8BACLgB,OAAO,CACN,CACErC,QAASC,EACTqC,GAAI0D,EACJlE,QAASD,EACTgE,cAAeD,EACfhE,YAAY,IAAIwE,MAAOC,cACvBH,SACAR,SACAS,gBAGH7E,SACAiB,SACH,GAAIjC,EAGF,OAFAV,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,YAG5C,GAAIY,EACF,MAAM,IAAI4E,MAAM5E,EAAMZ,QAE1B,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAKoD,QAAO,CAAOlD,EAAKC,IAAQ,OAAD,6B,YAC1C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,oCACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB4F,EAAyB,QAAV,EAAAjG,aAAG,EAAHA,EAAKI,aAAK,eAAE8F,cAC3BhE,EAAmB,QAAV,EAAAlC,aAAG,EAAHA,EAAKI,aAAK,eAAE+B,QAE3B,IAAK7B,EAOH,OANAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,yBAIb,IAAKqF,EAOH,OANAhG,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,+BAIb,IAAKsB,EAOH,OANAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,oBAIb,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,MAAEW,SAAgBJ,EACrBM,KAAK,8BACLwB,SACAtB,GAAG,UAAWtB,GACdsB,GAAG,gBAAiBqE,GACpBrE,GAAG,UAAWM,GACdU,SACH,IAAKpB,EAGH,OAFAvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAM,GAAIC,QAAS,YAG1C,GAAIY,EACF,MAAM,IAAI4E,MAAM5E,EAAMZ,QAE1B,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEA,UAAehB,C,udCjPf,kBACA,YAEA,SACA,YAEA,UAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEvBD,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UACvC,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,sCACpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrBgH,EAA2B,QAAV,EAAArH,aAAG,EAAHA,EAAKI,aAAK,eAAEkH,gBAEnC,IAAKhH,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKyG,EAGH,OAFApH,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,gCAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMY,EAAOC,MAAOC,SAAqBL,EAC9CM,KAAK,uBACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,kBAAmByF,GACtB5D,MAAM,aAAc,CAAEC,WAAW,IACpC,GAAIjC,EAGF,OAFAxB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASa,EAAWb,UAGtDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMY,EAAOX,QAAS,WAC7C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAK+B,MAAK,CAAO7B,EAAKC,IAAQ,OAAD,6B,gBACxC,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,sCAEnC,IAAI0B,GAAkB,QAAT,EAAA/B,aAAG,EAAHA,EAAK8B,YAAI,eAAEC,QAAgC,WACxD,MAAMzB,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QACpB2B,EAAqB,QAAT,EAAAhC,aAAG,EAAHA,EAAK8B,YAAI,eAAEG,WACvBC,EAAkB,QAAT,EAAAlC,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QACpBkF,EAA0B,QAAT,EAAArH,aAAG,EAAHA,EAAK8B,YAAI,eAAEwF,gBAElC,IAAKhH,EAQH,OAPAL,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,8BAEXV,QAAQC,IAAI,8BAGd,IAAK+B,EAQH,OAPAjC,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,yBAEXV,QAAQC,IAAI,8BAGd,IAAKkH,EAQH,OAPApH,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CACPC,IAAI,EACJC,KAAM,GACNC,QAAS,kCAEXV,QAAQC,IAAI,sCAGd,MAAMU,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IAEpCF,KAAMyB,EAAOZ,MAAOa,SAAqBjB,EAC9CM,KAAK,uBACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,kBAAmByF,GACtB/E,KAAK,QAAS,IAAIP,MACrB,GAAIM,EAGF,OAFApC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASyB,EAAWzB,UAGlDwB,GAASA,EAAMG,OAAS,IAC1BR,GAAS,IAAIK,EAAMG,UAErB,MAAQ5B,KAAM6B,EAAShB,MAAOiB,SAAuBrB,EAClDM,KAAK,uBACLgB,OAAO,CACNC,GAAIT,EACJD,WAAYD,EACZ3B,QAASC,EACTgH,gBAAiBD,EACjBtF,UAEDJ,SACAiB,SACH,OAAIH,GACFxC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS6B,EAAa7B,YAGxDX,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAM6B,EAAS5B,QAAS,YAE/C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UAC1C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,qCAEpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GAE5B,IAAKrC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMY,EAAOC,MAAOC,SAAqBL,EAC9CM,KAAK,uBACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,KAAMM,GACTU,SACH,GAAInB,EAGF,OAFAxB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASa,EAAWb,UAGtDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMY,EAAOX,QAAS,WAC7C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQgD,OAAM,CAAO9C,EAAKC,IAAQ,OAAD,6B,UAC5C,IACEC,QAAQC,IAAI,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,uCAEnC,MAAM0B,EAAiB,QAAT,EAAA/B,aAAG,EAAHA,EAAK8B,YAAI,eAAEC,MACnBG,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GACtBrC,EAASN,aAAG,EAAHA,EAAK8B,KAAKzB,QAEzB,IAAK0B,EAGH,OAFA9B,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,oBAG3C,IAAKN,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMoC,EAAMvB,MAAOwB,SAAoB5B,EAC5CM,KAAK,uBACLuB,OAAO,CAAElB,UACTH,GAAG,KAAMM,GACTP,SACAiB,SACH,GAAII,EAGF,OAFA/C,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASoC,EAAUpC,UAGrDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMoC,EAAMnC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQoD,QAAO,CAAOlD,EAAKC,IAAQ,OAAD,6B,UAC7C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,wCACpC,MAAM6B,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GACtBrC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QAE3B,IAAKC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IAEtC,MAAEW,SAAgBJ,EACrBM,KAAK,uBACLwB,SACAtB,GAAG,KAAMM,GACTN,GAAG,UAAWtB,GACdsC,SACH,OAAIpB,GACFtB,QAAQC,IAAIF,GACZA,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,YAGjDX,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAM,GAAIC,QAAS,YAE1C,CAAE,MAAOY,GAKP,OAJAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAG3C,CACF,MAEA,UAAehB,C,udCtQf,eACA,YACA,YAEA,YACA,SAEA,YACA,UAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEjBsD,EAAe,IAAI,EAAAC,aAAa,CACpCC,KAAMpC,QAAQC,IAAIkG,sBAEdG,EAAiB,IAAI,EAAAX,wBAAwB,CACjDC,eAAgB5F,QAAQC,IAAIkE,iBAkB9BxF,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UACvC,IACEC,QAAQC,IACN,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,4CAE1B,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAmB,QAAV,EAAAlC,aAAG,EAAHA,EAAKI,aAAK,eAAE+B,QAC3B,IAAK7B,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,kCACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,UAAWM,GACduB,MAAM,UAAW,CAAEC,WAAW,IACjC,GAAIlC,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,KAAK+B,MAAK,CAAO7B,EAAKC,IAAQ,OAAD,6B,sBACxC,IACEC,QAAQC,IACN,YAAqB,QAAT,EAAAH,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,4CAEzB,MAAMyG,EAA2B,QAAT,EAAA9G,aAAG,EAAHA,EAAK8B,YAAI,eAAE+C,iBAC7BlB,EAAqB,QAAT,EAAA3D,aAAG,EAAHA,EAAK8B,YAAI,eAAE8B,WACvBC,GACM,QAAT,EAAA7D,aAAG,EAAHA,EAAK8B,YAAI,eAAE+B,WAEM,GACdvD,EAAkB,QAAT,EAAAN,aAAG,EAAHA,EAAK8B,YAAI,eAAEzB,QACpB6B,EAAkB,QAAT,EAAAlC,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QACpB6C,EAAuB,QAAT,EAAAhF,aAAG,EAAHA,EAAK8B,YAAI,eAAEK,QACzBwE,EAAwB,QAAT,EAAA3G,aAAG,EAAHA,EAAK8B,YAAI,eAAE6E,aAChC,IAAKhD,EAGH,OAFA1D,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,IAAKN,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,oBAG3C,IAAK+F,EAGH,OAFA1G,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,6BAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,GAEtCmD,OApGa,EAAOwD,EAAqBb,IAAyB,OAAD,6BACzE,MAAMc,QAAmBtE,EAAauE,cAAc,CAClDxD,KAAMyC,EACNgB,kBAAmBJ,IAEfvB,QAAkByB,EAAWrH,MAAM,CACvCwH,WAAYJ,EACZK,SAAU,IAEZ,GAAK7B,aAAS,EAATA,EAAWA,UAGhB,OAAOA,EAAUA,SACnB,IAuFuB/B,CAAeN,EAAWgD,GACvCxC,EAA4B,QAAX,EAAAH,aAAI,EAAJA,EAAMI,GAAG,UAAE,eAAEC,KAAKC,GAAQA,aAAG,EAAHA,EAAKC,QAAQ,KAAM,OAC9DwC,EAAyB,qEAAqEJ,uYAAkZxC,IAEhfO,QAAiB,UAAM7C,KAC3B,6CACA,CACE8C,MAAO,sBACPd,SAAU,IACLA,EACH,CACE7C,KAAM,SACN4D,QAASkC,EACLA,EAAkB3C,EAClB4C,GAEN,CAAE/F,KAAM,OAAQ4D,QAASjB,IAE3BqB,YAAaA,EAAcgC,OAAOhC,GAAe,IAEnD,CACEE,QAAS,CACPC,cAAe,UAAUlE,QAAQC,IAAIkE,oBAI3C,GAA4B,OAAxBV,EAASW,WAmCX,OAHAnF,QAAQC,IAAIuE,EAASW,YACrBpF,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS8D,EAASW,aAlClB,CAChC,MAAMC,EAAiBZ,EAAS/D,MAE1B,KAAEA,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,kCACLuF,OAAO,CACNtE,GAAI2C,EAAe3C,GACnB4C,OAAQD,EAAeC,OACvBC,QAASF,EAAeE,QACxBb,MAAOW,EAAeX,MACtB3D,KAAMsE,EAAeG,QAAQ,GAAG7E,QAAQI,KACxCJ,QAAS0E,EAAeG,QAAQ,GAAG7E,QAAQgE,QAC3Cc,cAAeJ,EAAeG,QAAQ,GAAGC,cACzCC,cAAeL,EAAeM,MAAMD,cACpCE,kBAAmBP,EAAeM,MAAMC,kBACxCC,aAAcR,EAAeM,MAAME,aACnCzF,QAASC,EACT6B,QAASD,EACT6D,OAAQpC,EACRqC,UAAW7B,IAEZxC,SACAiB,SACH,GAAIpB,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAMF,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,YAC1C,IACEC,QAAQC,IACN,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,2CAE1B,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrB6B,EAAoB,QAAX,EAAAlC,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GACtBsD,EAA0B,QAAX,EAAAjG,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GAClC,IAAKrC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,IAAKsB,EAGH,OAFAjC,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,2BAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACtC,KAAEF,EAAI,MAAEa,SAAgBJ,EAC3BM,KAAK,kCACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,UAAWM,GACdN,GAAG,KAAMqE,GACTrD,SACH,GAAIpB,EAIF,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASY,EAAMZ,UAGjDX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMA,EAAMC,QAAS,WAC5C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEA,UAAehB,C,2JC5Of,kBACA,YACA,YACA,YACA,YACA,YACA,YACA,YAEMA,EAAS,UAAQC,SAKvBD,EAAOG,IAAI,WAAW,CAACC,EAAKC,IAAQA,EAAIQ,KAAK,eAC7Cb,EAAOF,IAAI,cAAe,WAC1BE,EAAOF,IAAI,cAAe,WAC1BE,EAAOF,IAAI,QAAS,WACpBE,EAAOF,IAAI,gBAAiB,WAC5BE,EAAOF,IAAI,sBAAuB,WAClCE,EAAOF,IAAI,YAAa,WACxBE,EAAOF,IAAI,gBAAiB,WAE5B,UAAeE,C,udCvBf,kBACA,YACA,SACA,YACA,UAAOD,SAEP,MAAMC,EAAS,UAAQC,SAEvBD,EAAOE,MAAM,KAAKC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,QACvC,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,sCAEpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QAE3B,IAAKC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IAEpCF,KAAMmH,EAAetG,MAAOuG,SAA6B3G,EAC9DM,KAAK,kCACLC,SAEH,OAAIoG,GACF9H,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASmH,EAAmBnH,WAI1DkH,GACF7H,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMmH,EAAelH,QAAS,cAGrDX,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAM,GAAIC,QAAS,YAE1C,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEAhB,EAAOE,MAAM,QAAQC,KAAI,CAAOC,EAAKC,IAAQ,OAAD,6B,UAC1C,IACEC,QAAQC,IAAI,YAAsB,QAAV,EAAAH,aAAG,EAAHA,EAAKI,aAAK,eAAEC,qCAEpC,MAAMC,EAAmB,QAAV,EAAAN,aAAG,EAAHA,EAAKI,aAAK,eAAEC,QACrBgH,EAA4B,QAAX,EAAArH,aAAG,EAAHA,EAAK6C,cAAM,eAAEF,GAEpC,IAAKrC,EAGH,OAFAL,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,yBAG3C,MAAMC,EAAQ,UAAIC,KAChB,CAAEC,IAAKT,EAAQU,KAAM,iBACrBC,QAAQC,IAAIC,qBAERC,GAAW,IAAAC,cAAa,CAAErB,MAAKC,OAAOY,IACpCF,KAAMgG,EAAcnF,MAAOwG,SAA4B5G,EAC5DM,KAAK,kCACLC,SACAC,GAAG,UAAWtB,GACdsB,GAAG,KAAMyF,GACTzE,SACH,GAAIoF,EAGF,OAFA/H,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAASoH,EAAkBpH,UAG7DX,EAAIO,OAAO,KACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAMC,KAAMgG,EAAc/F,QAAS,WACpD,CAAE,MAAOY,GAIP,OAHAtB,QAAQC,IAAIqB,GACZvB,EAAIO,OAAO,UACXP,EAAIQ,KAAK,CAAEC,IAAI,EAAOC,KAAM,GAAIC,QAAS,wBAE3C,CACF,MAEA,UAAehB,C,mcCzFf,eAIA,SACA,SAIa,EAAAyB,aAAe,CAAC4G,EAA0CpH,KAC9D,IAAAqH,oBAA6BjH,QAAQC,IAAIiH,aAAelH,QAAQC,IAAIkH,kBAAoB,CAC7FC,OAAQ,CACNnD,QAAS,CACPC,cAAetE,EAAQ,UAAUA,IAAU,KAG/CyH,QAAS,CACPvI,IAAMwI,I,MACJ,IAAKA,EAAK,OACV,MACMC,EAAqB,QAAZ,EADCP,EAAQjI,IAAIsI,QACLC,UAAI,QAAI,GAC/B,OAAKC,EACEC,mBAAmBD,QAD1B,CACiC,EAEnCE,IAAK,CAACH,EAAKI,EAAOC,KACXX,EAAQhI,KACbgI,EAAQhI,IAAIuI,OAAOD,EAAKM,mBAAmBF,GAAQ,OAAF,wBAC5CC,GAAO,CACVE,SAAU,MACVC,UAAU,IACV,EAEJC,OAAQ,CAACT,EAAKK,KACPX,EAAQhI,KACbgI,EAAQhI,IAAIuI,OAAOD,EAAK,GAAI,OAAF,wBAAOK,GAAO,CAAEG,UAAU,IAAO,KAMtD,EAAA9E,eAAiB,CAAOuD,EAAqBb,IAAyB,OAAD,6BAChF,IAEE,GADAzG,QAAQC,IAAIwG,IACPA,EACH,OAEF,MAAMxD,EAAe,IAAI,EAAAC,aAAa,CACpCC,KAAMpC,QAAQC,IAAIoC,mBAEdiE,EAAiB,IAAI,EAAAX,wBAAwB,CACjDC,eAAgB5F,QAAQC,IAAIkE,iBAExBqC,QAAmBtE,EAAauE,cAAc,CAClDxD,KAAMyC,EACNgB,kBAAmBJ,IAEfvB,QAAkByB,EAAWrH,MAAM,CACvCwH,WAAYJ,EACZK,SAAU,IAEZ,IAAK7B,EAAUA,UACb,OAGF,OAAOA,EAAUA,SACnB,CAAE,MAAOxE,GAGP,OAFAtB,QAAQC,IAAI,+BACZD,QAAQC,IAAIqB,EAEd,CACF,IAEa,EAAAiD,mBAA4BrE,GAAkB,OAAD,6B,MACxD,MAAM6I,EAAe,EAAAC,OAAOC,aAAa,CACvCC,QAAS,OAQX,OAA+B,QAAxB,SANqBH,EAAaI,IAAIC,KAAK,CAChDC,EAAGnJ,EACHoJ,GAAIvI,QAAQC,IAAIuI,+BAChBlB,IAAKtH,QAAQC,IAAIwI,wBAGE/I,KAAKgJ,aAAK,eAAEtF,KAAKuF,IAC7B,CAAEC,YAAaD,EAAKC,YAAaC,KAAMF,EAAKE,QAEvD,G,2JCrFA,kBAEMC,EAAO9I,QAAQC,IAAI6I,MAAQ,IAEjC,UAAIC,OAAOD,GAAM,IAAM7J,QAAQC,IAAI,qBAAuB4J,I,UCJ1DE,EAAOC,QAAUC,QAAQ,gB,UCAzBF,EAAOC,QAAUC,QAAQ,Q,UCAzBF,EAAOC,QAAUC,QAAQ,W,UCAzBF,EAAOC,QAAUC,QAAQ,gB,UCAzBF,EAAOC,QAAUC,QAAQ,O,UCAzBF,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,U,UCAzBF,EAAOC,QAAUC,QAAQ,a,UCAzBF,EAAOC,QAAUC,QAAQ,e,GCCrBC,EAA2B,CAAC,GAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBnE,IAAjBoE,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAM,EAAoBF,GAAUG,KAAKR,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,OACf,CCnB0BG,CAAoB,I","sources":["webpack://higgins-ai-api/./src/api/config/express.ts","webpack://higgins-ai-api/./src/api/routes/v1/chat.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/collection.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/completion.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/feedback.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/higginsChat.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/higginsCompletion.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/index.ts","webpack://higgins-ai-api/./src/api/routes/v1/industry.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/public/chat.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/public/collection.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/public/completion.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/public/feedback.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/public/higginsChat.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/public/higginsCompletion.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/public/index.ts","webpack://higgins-ai-api/./src/api/routes/v1/public/organizations.route.ts","webpack://higgins-ai-api/./src/api/utils/utils.ts","webpack://higgins-ai-api/./src/index.ts","webpack://higgins-ai-api/external commonjs \"@supabase/ssr\"","webpack://higgins-ai-api/external commonjs \"axios\"","webpack://higgins-ai-api/external commonjs \"chromadb\"","webpack://higgins-ai-api/external commonjs \"cookie-parser\"","webpack://higgins-ai-api/external commonjs \"cors\"","webpack://higgins-ai-api/external commonjs \"dotenv\"","webpack://higgins-ai-api/external commonjs \"express\"","webpack://higgins-ai-api/external commonjs \"googleapis\"","webpack://higgins-ai-api/external commonjs \"jsonwebtoken\"","webpack://higgins-ai-api/webpack/bootstrap","webpack://higgins-ai-api/webpack/startup"],"sourcesContent":["import express from \"express\";\nimport cors from \"cors\";\nimport { json as _json } from \"express\";\nimport router from \"../routes/v1\";\nimport cookies from \"cookie-parser\";\n\n/**\n * Express instance\n * @public\n */\nconst app = express();\n\n// enable CORS - Cross Origin Resource Sharing\napp.use(cors());\napp.use(_json());\napp.use(cookies());\n\n// mount api v1 routes\napp.use(\"/api/v1\", router);\n\nexport default app;\n","import express from 'express';\nimport dotenv from 'dotenv';\nimport cookie from 'cookie-parser';\nimport { createClient } from '../../utils/utils';\nimport jwt from 'jsonwebtoken';\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route('/').get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET CHATS`);\n\n    const userId = req?.query?.user_id as string | undefined;\n    const industry = req?.query?.industry as string | undefined;\n\n    console.log(industry);\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Authentication Error' });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: 'authenticated' },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    if (!industry || industry.toLowerCase() === 'all') {\n      const { data: chats, error: chatsError } = await supabase\n        .from('chat')\n        .select()\n        .eq('user_id', userId);\n      if (chatsError) {\n        res.status(500);\n        res.send({ ok: false, data: [], message: chatsError.message });\n        return;\n      }\n      res.status(200);\n      res.send({ ok: true, data: chats, message: 'success' });\n    } else {\n      const { data: chats, error: chatsError } = await supabase\n        .from('chat')\n        .select()\n        .eq('user_id', userId)\n        .eq('industry', industry);\n\n      if (chatsError) {\n        res.status(500);\n        res.send({ ok: false, data: [], message: chatsError.message });\n        return;\n      }\n      res.status(200);\n      res.send({ ok: true, data: chats, message: 'success' });\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n    return;\n  }\n});\n\nrouter.route('/').post(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – POST CHAT`);\n    let title = (req?.body?.title as string | undefined) || 'New Chat';\n    const userId = req?.body?.user_id as string | undefined;\n    const createdAt = req?.body?.created_at as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    const industry = req?.body?.industry as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: 'Authentication Error',\n      });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: 'Invalid Request. No Chat ID provided.',\n      });\n      return;\n    }\n    if (!industry) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: 'Invalid Request. No Industry provided.',\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: 'authenticated' },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: count, error: countError } = await supabase\n      .from('chat')\n      .select()\n      .eq('user_id', userId)\n      .eq('industry', industry)\n      .like('title', `%${title}%`);\n    if (countError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: countError.message });\n      return;\n    }\n    if (count && count.length > 1) {\n      title += ` ${count.length}`;\n    }\n    const { data: newChat, error: newChatError } = await supabase\n      .from('chat')\n      .upsert({\n        id: chatId,\n        created_at: createdAt,\n        user_id: userId,\n        title,\n        industry,\n      })\n      .select()\n      .single();\n    if (newChatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: newChatError.message });\n      return;\n    }\n    console.log(newChat);\n    res.status(200);\n    res.send({ ok: true, data: newChat, message: 'success' });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n    return;\n  }\n});\n\nrouter.route('/:id').get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET CHAT`);\n\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.params?.id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Authentication Error' });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: 'authenticated' },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chats, error: chatsError } = await supabase\n      .from('chat')\n      .select()\n      .eq('user_id', userId)\n      .eq('id', chatId)\n      .single();\n    if (chatsError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatsError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chats, message: 'success' });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n    return;\n  }\n});\n\nrouter.route('/:id').patch(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – PATCH CHAT`);\n\n    const title = req?.body?.title as string | undefined;\n    const chatId = req?.params?.id;\n    const userId = req?.body?.user_id as string | undefined;\n\n    if (!title) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Invalid Request' });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Authentication Error' });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: 'authenticated' },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chat, error: chatError } = await supabase\n      .from('chat')\n      .update({ title })\n      .eq('id', chatId)\n      .select()\n      .single();\n    if (chatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chat, message: 'success' });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n    return;\n  }\n});\n\nrouter.route('/:id').delete(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – DELETE CHAT`);\n    const chatId = req?.params?.id;\n    const userId = req?.query?.user_id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Authentication Error' });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: 'authenticated' },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { error } = await supabase\n      .from('chat')\n      .delete()\n      .eq('id', chatId)\n      .eq('user_id', userId)\n      .single();\n    if (error) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: [], message: 'success' });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n\n    return;\n  }\n});\n\nexport default router;\n","import { ChromaClient } from \"chromadb\";\nimport express from \"express\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst router = express.Router();\n\nconst chromaClient = new ChromaClient({\n  path: process.env.CHROMADB_PRO_URL,\n});\n\nrouter.route(\"/\").get(async (req, res) => {\n  const collections = await chromaClient.listCollections();\n  if (collections && collections.length > 0) {\n    res.send(collections);\n  }\n});\n\nexport default router;\n","import express from 'express';\nimport dotenv from 'dotenv';\nimport axios from 'axios';\nimport {\n  createClient,\n  customGoogleSearch,\n  getRelatedDocs,\n} from '../../utils/utils';\nimport { OpenAiCompletion } from '../../../types/types';\nimport jwt from 'jsonwebtoken';\n\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route('/').get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET COMPLETIONS`);\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Authentication Error' });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'No Chat Input Provided' });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: 'authenticated' },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from('chat_completion')\n      .select()\n      .eq('user_id', userId)\n      .eq('chat_id', chatId)\n      .order('created', { ascending: true });\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: 'success' });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n    return;\n  }\n});\n\nrouter.route('/').post(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – POST COMPLETION`);\n    const userInput = req?.body?.user_input as string | undefined;\n    const messages =\n      (req?.body?.messages as\n        | { role: string; content: string }[]\n        | undefined) || [];\n    const userId = req?.body?.user_id as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    if (!userInput) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'No User Input Provided' });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Authentication Error' });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Invalid Request' });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: 'authenticated' },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n\n    const supabase = createClient({ req, res }, token);\n    const { data: chat, error: chatError } = await supabase\n      .from('chat')\n      .select()\n      .eq('id', chatId)\n      .single();\n    if (chatError) {\n      console.log(chatError);\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatError.message });\n      return;\n    }\n    const industryName = chat.industry || '';\n    const { data: industry, error: industryError } = await supabase\n      .from('industry')\n      .select()\n      .eq('name', industryName)\n      .single();\n    if (industryError) {\n      console.log(industryError);\n      // res.status(500);\n      // res.send({ ok: false, data: [], message: industryError.message });\n      // return;\n    }\n\n    const docs = await getRelatedDocs(\n      userInput,\n      industry?.name?.toLowerCase() === 'all'\n        ? 'all-industries'\n        : industry?.name?.toLowerCase() || ''\n    );\n    const supportingDocs = docs?.at(0)?.map((doc) => doc?.replace('\\n', ' '));\n    console.log(supportingDocs);\n    const googleSearchResults = await customGoogleSearch(userInput);\n    console.log(googleSearchResults);\n    const response = await axios.post<OpenAiCompletion>(\n      `https://api.openai.com/v1/chat/completions`,\n      {\n        model: 'gpt-4-turbo-preview',\n        messages: [\n          ...messages,\n          {\n            role: 'system',\n            content:\n              (industry?.system_directive ||\n                `Your name is Higgins. You are a helpful AI assistant. You may be provided with some supporting context that you can use to help you respond to the user's next prompt. If the supporting context does not closely relate to the user's prompt, ignore it as you formulate a response. If the user's prompt refers to any previous messages, ignore the supporting context as you formulate a response. Your response should always be in markdown format. The supporting context will be in the following format: <context>supporting context</context>. You may also be provided an array of touples containing display links and links. If you are provided this array, tell the user that they may find more information about their question by checking out the links. The display link should be the text that is shown to the user, and the link url should be the link in the touple. The array of links will be in the following format: <linksArray>[array]</linksArray> A touple in this array will have the following format: '{displayLink: \"example.com\", link: \"https://example.com\"}`) +\n              `\n\n            <context>${JSON.stringify(supportingDocs)}</context>\n            <linksArray>${JSON.stringify(googleSearchResults)}</linksArray>\n            `,\n          },\n          { role: 'user', content: userInput },\n        ],\n        temperature: industry?.completion_temperature || 0.7,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n        },\n      }\n    );\n    if (response.status === 200) {\n      const completionData = response.data;\n      const { data, error } = await supabase\n        .from('chat_completion')\n        .upsert({\n          id: completionData.id,\n          object: completionData.object,\n          created: completionData.created,\n          model: completionData.model,\n          role: completionData.choices[0].message.role,\n          message: completionData.choices[0].message.content,\n          finish_reason: completionData.choices[0].finish_reason,\n          prompt_tokens: completionData.usage.prompt_tokens,\n          completion_tokens: completionData.usage.completion_tokens,\n          total_tokens: completionData.usage.total_tokens,\n          user_id: userId,\n          chat_id: chatId,\n          prompt: userInput,\n          documents: supportingDocs as string[] | null | undefined,\n        })\n        .select()\n        .single();\n      if (error) {\n        console.log(error);\n        res.status(500);\n        res.send({ ok: false, data: [], message: error.message });\n        return;\n      }\n      res.status(200);\n      res.send({ ok: true, data: data, message: 'success' });\n    } else {\n      console.log(response.statusText);\n      res.status(500);\n      res.send({ ok: false, data: [], message: response.statusText });\n      return;\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n    return;\n  }\n});\n\nrouter.route('/:id').get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET COMPLETION`);\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n    const completionId = req?.params?.id;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Authentication Error' });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'No Chat Input Provided' });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: 'authenticated' },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from('chat_completion')\n      .select()\n      .eq('user_id', userId)\n      .eq('chat_id', chatId)\n      .eq('id', completionId)\n      .single();\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: 'success' });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n    return;\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookie from \"cookie-parser\";\nimport { createClient } from \"../../utils/utils\";\nimport jwt from \"jsonwebtoken\";\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET FEEDBACK`);\n    const userId = req?.query?.user_id as string | undefined;\n    const completionId = req?.query?.completion_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: undefined,\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!completionId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: undefined,\n        message: \"No Completions ID provided\",\n      });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: undefined,\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"completion_feedback\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"completion_id\", completionId)\n      .eq(\"chat_id\", chatId);\n    if (!error) {\n      res.status(200);\n      res.send({ ok: true, data: data, message: \"success\" });\n      return;\n    } else {\n      throw new Error(error.message);\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – POST FEEDBACK`);\n    const userId = req?.body?.user_id as string | undefined;\n    const completionId = req?.body?.completion_id as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    const ratingId = req?.body?.rating_id as string | undefined;\n    const rating = req?.body?.rating as string | undefined;\n    const prompt = req?.body?.prompt as string | undefined;\n    const completion = req?.body?.completion as string | undefined;\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!ratingId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Rating ID provided\",\n      });\n      return;\n    }\n    if (!rating) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Rating provided\",\n      });\n      return;\n    }\n    if (!completionId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Completion ID provided\",\n      });\n      return;\n    }\n    if (!completion) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Completion provided\",\n      });\n      return;\n    }\n    if (!prompt) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Prompt provided\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"completion_feedback\")\n      .upsert([\n        {\n          user_id: userId,\n          id: ratingId,\n          chat_id: chatId,\n          completion_id: completionId,\n          created_at: new Date().toISOString(),\n          rating,\n          prompt,\n          completion,\n        },\n      ])\n      .select()\n      .single();\n    if (data) {\n      res.status(200);\n      res.send({ ok: true, data: data, message: \"success\" });\n      return;\n    }\n    if (error) {\n      throw new Error(error.message);\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").delete(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – DELETE FEEDBACK`);\n    const userId = req?.query?.user_id as string | undefined;\n    const completionId = req?.query?.completion_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!completionId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Completions ID provided\",\n      });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { error } = await supabase\n      .from(\"completion_feedback\")\n      .delete()\n      .eq(\"user_id\", userId)\n      .eq(\"completion_id\", completionId)\n      .eq(\"chat_id\", chatId)\n      .single();\n    if (!error) {\n      res.status(200);\n      res.send({ ok: true, data: [], message: \"success\" });\n      return;\n    }\n    if (error) {\n      throw new Error(error.message);\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookie from \"cookie-parser\";\nimport { createClient } from \"../../utils/utils\";\nimport jwt from \"jsonwebtoken\";\n\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET HIGGINS CHATS`);\n    const userId = req?.query?.user_id as string | undefined;\n    const organization = req?.query?.organization as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!organization) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Organization provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chats, error: chatsError } = await supabase\n      .from(\"higgins_chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"organization\", organization)\n      .order(\"created_at\", { ascending: true });\n    if (chatsError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatsError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chats, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – POST HIGGINS CHAT`);\n\n    let title = (req?.body?.title as string | undefined) || \"New Chat\";\n    const userId = req?.body?.user_id as string | undefined;\n    const createdAt = req?.body?.created_at as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    const organization = req?.body?.organization as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    if (!organization) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Organization provided\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { data: count, error: countError } = await supabase\n      .from(\"higgins_chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"organization\", organization)\n      .like(\"title\", `%${title}%`);\n    if (countError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: countError.message });\n      return;\n    }\n    if (count && count.length > 1) {\n      title += ` ${count.length}`;\n    }\n    const { data: newChat, error: newChatError } = await supabase\n      .from(\"higgins_chat\")\n      .upsert({\n        id: chatId,\n        created_at: createdAt,\n        user_id: userId,\n        organization,\n        title,\n      })\n      .select()\n      .single();\n    if (newChatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: newChatError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: newChat, message: \"success\" });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET HIGGINS CHAT`);\n\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.params?.id;\n\n    if (!userId) {\n      console.log(\"No User ID Provided\");\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chats, error: chatsError } = await supabase\n      .from(\"higgins_chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"id\", chatId)\n      .single();\n    if (chatsError) {\n      console.log(chatsError.message);\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatsError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chats, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").patch(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – PATCH HIGGINS CHAT`);\n\n    const title = req?.body?.title as string | undefined;\n    const chatId = req?.params?.id;\n    const userId = req?.body.user_id as string | undefined;\n\n    if (!title) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Invalid Request\" });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chat, error: chatError } = await supabase\n      .from(\"higgins_chat\")\n      .update({ title })\n      .eq(\"id\", chatId)\n      .select()\n      .single();\n    if (chatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chat, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").delete(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – DELETE HIGGINS CHATS`);\n    const chatId = req?.params?.id;\n    const userId = req?.query?.user_id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { error } = await supabase\n      .from(\"higgins_chat\")\n      .delete()\n      .eq(\"id\", chatId)\n      .eq(\"user_id\", userId)\n      .single();\n    if (error) {\n      console.log(res);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: [], message: \"success\" });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n\n    return;\n  }\n});\n\nexport default router;\n","import { ChromaClient, OpenAIEmbeddingFunction } from 'chromadb';\nimport express from 'express';\nimport dotenv from 'dotenv';\nimport axios from 'axios';\nimport { createClient, getRelatedDocs } from '../../utils/utils';\nimport { OpenAiCompletion } from '../../../types/types';\nimport jwt from 'jsonwebtoken';\ndotenv.config();\n\nconst router = express.Router();\n\nconst chromaClient = new ChromaClient({\n  path: process.env.CHROMADB_PRO_URL,\n});\nconst openAIEmbedder = new OpenAIEmbeddingFunction({\n  openai_api_key: process.env.OPENAI_API_KEY!,\n});\n\n// const getRelatedDocs = async (inputString: string, organization: string) => {\n//   const collection = await chromaClient.getCollection({\n//     name: organization,\n//     embeddingFunction: openAIEmbedder,\n//   });\n//   const documents = await collection.query({\n//     queryTexts: inputString,\n//     nResults: 5,\n//   });\n//   if (!documents.documents) {\n//     return undefined;\n//   }\n//   return documents.documents;\n// };\n\nrouter.route('/').get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET HIGGINS COMPLETIONS`);\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Authentication Error' });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'No Chat Input Provided' });\n      return;\n    }\n    const token = jwt.sign({ sub: userId, role: 'authenticated' }, process.env.SUPABASE_JWT_SECRET!);\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase.from('higgins_chat_completion').select().eq('user_id', userId).eq('chat_id', chatId).order('created', { ascending: true });\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: 'success' });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n    return;\n  }\n});\n\nrouter.route('/').post(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – POST HIGGINS COMPLETION`);\n    const systemDirective = req?.body?.system_directive as string | undefined;\n    const userInput = req?.body?.user_input as string | undefined;\n    const messages = (req?.body?.messages as { role: string; content: string }[] | undefined) || [];\n    const userId = req?.body?.user_id as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    const temperature = req?.body?.chat_id as string | undefined;\n    const organization = req?.body?.organization as string | undefined;\n    if (!userInput) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'No User Input Provided' });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Authentication Error' });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Invalid Request' });\n      return;\n    }\n    if (!organization) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'No Organization Provided' });\n      return;\n    }\n    const token = jwt.sign({ sub: userId, role: 'authenticated' }, process.env.SUPABASE_JWT_SECRET!);\n    const supabase = createClient({ req, res }, token);\n\n    const docs = await getRelatedDocs(userInput, organization);\n    const supportingDocs = docs?.at(0)?.map((doc) => doc?.replace('\\n', ' '));\n    console.log(supportingDocs);\n    const defaultSystemDirective = `Your name is Higgins. You are a helpful assistant for the company ${organization}. You may be provided with some supporting context that you can use to help you respond to the user's next prompt. If the supporting context does not closely relate to the user's prompt, ignore it as you formulate a response. If the user's prompt refers to any previous messages, ignore the supporting context as you formulate a response. The supporting context will be in the following format: <context>supporting context</context>.\n    \n    <context>${JSON.stringify(supportingDocs)}</context>`;\n\n    const response = await axios.post<OpenAiCompletion>(\n      `https://api.openai.com/v1/chat/completions`,\n      {\n        model: 'gpt-4-turbo-preview',\n        messages: [\n          ...messages,\n          {\n            role: 'system',\n            content: systemDirective ? systemDirective + supportingDocs : defaultSystemDirective,\n          },\n          { role: 'user', content: userInput },\n        ],\n        temperature: temperature ? Number(temperature) : 0.7,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n        },\n      }\n    );\n    if (response.status === 200) {\n      const completionData = response.data;\n\n      const { data, error } = await supabase\n        .from('higgins_chat_completion')\n        .insert({\n          id: completionData.id,\n          object: completionData.object,\n          created: completionData.created,\n          model: completionData.model,\n          role: completionData.choices[0].message.role,\n          message: completionData.choices[0].message.content,\n          finish_reason: completionData.choices[0].finish_reason,\n          prompt_tokens: completionData.usage.prompt_tokens,\n          completion_tokens: completionData.usage.completion_tokens,\n          total_tokens: completionData.usage.total_tokens,\n          user_id: userId,\n          chat_id: chatId,\n          prompt: userInput,\n          documents: supportingDocs as string[] | null | undefined,\n        })\n        .select()\n        .single();\n      if (error) {\n        console.log(error);\n        res.status(500);\n        res.send({ ok: false, data: [], message: error.message });\n        return;\n      }\n      res.status(200);\n      res.send({ ok: true, data: data, message: 'success' });\n    } else {\n      console.log(response.statusText);\n      res.status(500);\n      res.send({ ok: false, data: [], message: response.statusText });\n      return;\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n    return;\n  }\n});\n\nrouter.route('/:id').get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET HIGGINS COMPLETION`);\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.params?.id as string | undefined;\n    const completionId = req?.params?.id;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Authentication Error' });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'No Chat Input Provided' });\n      return;\n    }\n    const token = jwt.sign({ sub: userId, role: 'authenticated' }, process.env.SUPABASE_JWT_SECRET!);\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase.from('higgins_chat_completion').select().eq('user_id', userId).eq('chat_id', chatId).eq('id', completionId).single();\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: 'success' });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n    return;\n  }\n});\n\nexport default router;\n","import express from 'express';\nimport completionRoute from './completion.route';\nimport collectionRoute from './collection.route';\nimport chatRoute from './chat.route';\nimport higginsChatRoute from './higginsChat.route';\nimport higginsCompletionRoute from './higginsCompletion.route';\nimport feedbackRoute from './feedback.route';\nimport publicRoute from './public';\nimport industryRoute from './industry.route';\n\nconst router = express.Router();\n\n/**\n * GET v1/status\n */\nrouter.get('/status', (req, res) => res.send('OK'));\nrouter.use('/completion', completionRoute);\nrouter.use('/collection', collectionRoute);\nrouter.use('/chat', chatRoute);\nrouter.use('/higgins-chat', higginsChatRoute);\nrouter.use('/higgins-completion', higginsCompletionRoute);\nrouter.use('/feedback', feedbackRoute);\nrouter.use('/public', publicRoute);\nrouter.use('/industry', industryRoute);\n\nexport default router;\n","import express from 'express';\nimport dotenv from 'dotenv';\nimport cookie from 'cookie-parser';\nimport { createClient } from '../../utils/utils';\nimport jwt from 'jsonwebtoken';\n\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route('/').get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET INDUSTRIES`);\n    const userId = req?.query?.user_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: 'Authentication Error' });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: 'authenticated' },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: industries, error: industriesError } = await supabase\n      .from('industry')\n      .select('*')\n      .order('created_at', { ascending: true });\n    if (industriesError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: industriesError.message });\n      return;\n    }\n    console.log(industries);\n    res.status(200);\n    res.send({ ok: true, data: industries, message: 'success' });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: 'Something went wrong' });\n    return;\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookie from \"cookie-parser\";\nimport { createClient } from \"../../../utils/utils\";\nimport jwt from \"jsonwebtoken\";\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET PUBLIC CHATS`);\n\n    const userId = req?.query?.user_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { data: chats, error: chatsError } = await supabase\n      .from(\"public_chat\")\n      .select()\n      .eq(\"user_id\", userId);\n\n    if (chatsError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatsError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chats, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – POST PUBLIC CHAT`);\n    let title = (req?.body?.title as string | undefined) || \"New Chat\";\n    const userId = req?.body?.user_id as string | undefined;\n    const createdAt = req?.body?.created_at as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: count, error: countError } = await supabase\n      .from(\"public_chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .like(\"title\", `%${title}%`);\n    if (countError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: countError.message });\n      return;\n    }\n    if (count && count.length > 1) {\n      title += ` ${count.length}`;\n    }\n    const { data: newChat, error: newChatError } = await supabase\n      .from(\"public_chat\")\n      .upsert({ id: chatId, created_at: createdAt, user_id: userId, title })\n      .select()\n      .single();\n    if (newChatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: newChatError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: newChat, message: \"success\" });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET PUBLIC CHAT`);\n\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.params?.id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chats, error: chatsError } = await supabase\n      .from(\"public_chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"id\", chatId)\n      .single();\n    if (chatsError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatsError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chats, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").patch(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – PATCH PUBLIC CHAT`);\n\n    const title = req?.body?.title as string | undefined;\n    const chatId = req?.params?.id;\n    const userId = req?.body?.user_id as string | undefined;\n\n    if (!title) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Invalid Request\" });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chat, error: chatError } = await supabase\n      .from(\"public_chat\")\n      .update({ title })\n      .eq(\"id\", chatId)\n      .select()\n      .single();\n    if (chatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chat, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").delete(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – DELETE PUBLIC CHAT`);\n    const chatId = req?.params?.id;\n    const userId = req?.query?.user_id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { error } = await supabase\n      .from(\"public_chat\")\n      .delete()\n      .eq(\"id\", chatId)\n      .eq(\"user_id\", userId)\n      .single();\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: [], message: \"success\" });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n\n    return;\n  }\n});\n\nexport default router;\n","import { ChromaClient } from \"chromadb\";\nimport express from \"express\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst router = express.Router();\n\nconst chromaClient = new ChromaClient({\n  path: process.env.CHROMADB_PUBLIC_URL,\n});\n\nrouter.route(\"/\").get(async (req, res) => {\n  const collections = await chromaClient.listCollections();\n  if (collections && collections.length > 0) {\n    res.send(collections);\n    return;\n  }\n  res.send(\"No collections found\");\n  return;\n});\n\nexport default router;\n","import { ChromaClient, OpenAIEmbeddingFunction } from \"chromadb\";\nimport express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookieParser from \"cookie-parser\";\nimport axios from \"axios\";\nimport { createClient } from \"../../../utils/utils\";\nimport { OpenAiCompletion } from \"../../../../types/types\";\nimport jwt from \"jsonwebtoken\";\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET PUBLIC COMPLETIONS`);\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Chat Input Provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"public_chat_completion\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"chat_id\", chatId)\n      .order(\"created\", { ascending: true });\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – POST PUBLIC COMPLETION`);\n    const userInput = req?.body?.user_input as string | undefined;\n    const messages =\n      (req?.body?.messages as\n        | { role: string; content: string }[]\n        | undefined) || [];\n    const userId = req?.body?.user_id as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    if (!userInput) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No User Input Provided\" });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Invalid Request\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const response = await axios.post(\n      `https://api.openai.com/v1/chat/completions`,\n      {\n        model: \"gpt-4-turbo-preview\",\n        messages: [\n          ...messages,\n          {\n            role: \"system\",\n            content: \"You are a helpful assistant\",\n          },\n          { role: \"user\", content: userInput },\n        ],\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n        },\n      }\n    );\n    if (response.statusText === \"OK\") {\n      const completionData = response.data as OpenAiCompletion;\n      const { data, error } = await supabase\n        .from(\"public_chat_completion\")\n        .upsert({\n          id: completionData.id,\n          object: completionData.object,\n          created: completionData.created,\n          model: completionData.model,\n          role: completionData.choices[0].message.role,\n          message: completionData.choices[0].message.content,\n          finish_reason: completionData.choices[0].finish_reason,\n          prompt_tokens: completionData.usage.prompt_tokens,\n          completion_tokens: completionData.usage.completion_tokens,\n          total_tokens: completionData.usage.total_tokens,\n          user_id: userId,\n          chat_id: chatId,\n          prompt: userInput,\n        })\n        .select()\n        .single();\n      if (error) {\n        console.log(error);\n        res.status(500);\n        res.send({ ok: false, data: [], message: error.message });\n        return;\n      }\n      res.status(200);\n      res.send({ ok: true, data: data, message: \"success\" });\n    } else {\n      console.log(response.statusText);\n      res.status(500);\n      res.send({ ok: false, data: [], message: response.statusText });\n      return;\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET PUBLIC COMPLETION`);\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n    const completionId = req?.params?.id;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Chat Input Provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"public_chat_completion\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"chat_id\", chatId)\n      .eq(\"id\", completionId)\n      .single();\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookie from \"cookie-parser\";\nimport { createClient } from \"../../../utils/utils\";\nimport jwt from \"jsonwebtoken\";\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET PUBLIC FEEDBACK`);\n    const userId = req?.query?.user_id as string | undefined;\n    const completionId = req?.query?.completion_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: undefined,\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!completionId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: undefined,\n        message: \"No Completions ID provided\",\n      });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: undefined,\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"public_completion_feedback\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"completion_id\", completionId)\n      .eq(\"chat_id\", chatId);\n    if (!error) {\n      res.status(200);\n      res.send({ ok: true, data: data, message: \"success\" });\n      return;\n    } else {\n      throw new Error(error.message);\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – POST PUBLIC FEEDBACK`);\n    const userId = req?.body?.user_id as string | undefined;\n    const completionId = req?.body?.completion_id as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    const ratingId = req?.body?.rating_id as string | undefined;\n    const rating = req?.body?.rating as string | undefined;\n    const prompt = req?.body?.prompt as string | undefined;\n    const completion = req?.body?.completion as string | undefined;\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!ratingId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Rating ID provided\",\n      });\n      return;\n    }\n    if (!rating) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Rating provided\",\n      });\n      return;\n    }\n    if (!completionId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Completion ID provided\",\n      });\n      return;\n    }\n    if (!completion) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Completion provided\",\n      });\n      return;\n    }\n    if (!prompt) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Prompt provided\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"public_completion_feedback\")\n      .upsert([\n        {\n          user_id: userId,\n          id: ratingId,\n          chat_id: chatId,\n          completion_id: completionId,\n          created_at: new Date().toISOString(),\n          rating,\n          prompt,\n          completion,\n        },\n      ])\n      .select()\n      .single();\n    if (data) {\n      res.status(200);\n      res.send({ ok: true, data: data, message: \"success\" });\n      return;\n    }\n    if (error) {\n      throw new Error(error.message);\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").delete(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – DELETE PUBLIC FEEDBACK`);\n    const userId = req?.query?.user_id as string | undefined;\n    const completionId = req?.query?.completion_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!completionId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Completions ID provided\",\n      });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { error } = await supabase\n      .from(\"public_completion_feedback\")\n      .delete()\n      .eq(\"user_id\", userId)\n      .eq(\"completion_id\", completionId)\n      .eq(\"chat_id\", chatId)\n      .single();\n    if (!error) {\n      res.status(200);\n      res.send({ ok: true, data: [], message: \"success\" });\n      return;\n    }\n    if (error) {\n      throw new Error(error.message);\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookie from \"cookie-parser\";\nimport { createClient } from \"../../../utils/utils\";\nimport jwt from \"jsonwebtoken\";\n\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET HIGGINS PUBLIC CHATS`);\n    const userId = req?.query?.user_id as string | undefined;\n    const organizationId = req?.query?.organization_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!organizationId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Organization ID provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chats, error: chatsError } = await supabase\n      .from(\"higgins_public_chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"organization_id\", organizationId)\n      .order(\"created_at\", { ascending: true });\n    if (chatsError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatsError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chats, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – POST HIGGINS PUBLIC CHAT`);\n\n    let title = (req?.body?.title as string | undefined) || \"New Chat\";\n    const userId = req?.body?.user_id as string | undefined;\n    const createdAt = req?.body?.created_at as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    const organizationId = req?.body?.organization_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Authentication Error\",\n      });\n      console.log(\"ERROR: No user ID provided\");\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Invalid Request\",\n      });\n      console.log(\"ERROR: No chat ID provided\");\n      return;\n    }\n    if (!organizationId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Organization provided\",\n      });\n      console.log(\"ERROR: No organization ID provided\");\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { data: count, error: countError } = await supabase\n      .from(\"higgins_public_chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"organization_id\", organizationId)\n      .like(\"title\", `%${title}%`);\n    if (countError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: countError.message });\n      return;\n    }\n    if (count && count.length > 1) {\n      title += ` ${count.length}`;\n    }\n    const { data: newChat, error: newChatError } = await supabase\n      .from(\"higgins_public_chat\")\n      .upsert({\n        id: chatId,\n        created_at: createdAt,\n        user_id: userId,\n        organization_id: organizationId,\n        title,\n      })\n      .select()\n      .single();\n    if (newChatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: newChatError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: newChat, message: \"success\" });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET HIGGINS PUBLIC CHAT`);\n\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.params?.id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chats, error: chatsError } = await supabase\n      .from(\"higgins_public_chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"id\", chatId)\n      .single();\n    if (chatsError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatsError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chats, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").patch(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.body?.user_id} – PATCH HIGGINS PUBLIC CHAT`);\n\n    const title = req?.body?.title as string | undefined;\n    const chatId = req?.params?.id;\n    const userId = req?.body.user_id as string | undefined;\n\n    if (!title) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Invalid Request\" });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chat, error: chatError } = await supabase\n      .from(\"higgins_public_chat\")\n      .update({ title })\n      .eq(\"id\", chatId)\n      .select()\n      .single();\n    if (chatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chat, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").delete(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – DELETE HIGGINS PUBLIC CHAT`);\n    const chatId = req?.params?.id;\n    const userId = req?.query?.user_id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { error } = await supabase\n      .from(\"higgins_public_chat\")\n      .delete()\n      .eq(\"id\", chatId)\n      .eq(\"user_id\", userId)\n      .single();\n    if (error) {\n      console.log(res);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: [], message: \"success\" });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n\n    return;\n  }\n});\n\nexport default router;\n","import { ChromaClient, OpenAIEmbeddingFunction } from \"chromadb\";\nimport express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookieParser from \"cookie-parser\";\nimport axios from \"axios\";\nimport { createClient } from \"../../../utils/utils\";\nimport { OpenAiCompletion } from \"../../../../types/types\";\nimport jwt from \"jsonwebtoken\";\ndotenv.config();\n\nconst router = express.Router();\n\nconst chromaClient = new ChromaClient({\n  path: process.env.CHROMADB_PUBLIC_URL,\n});\nconst openAIEmbedder = new OpenAIEmbeddingFunction({\n  openai_api_key: process.env.OPENAI_API_KEY!,\n});\n\nconst getRelatedDocs = async (inputString: string, organization: string) => {\n  const collection = await chromaClient.getCollection({\n    name: organization,\n    embeddingFunction: openAIEmbedder,\n  });\n  const documents = await collection.query({\n    queryTexts: inputString,\n    nResults: 5,\n  });\n  if (!documents?.documents) {\n    return undefined;\n  }\n  return documents.documents;\n};\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(\n      `USER_ID: ${req?.query?.user_id} – GET HIGGINS PUBLIC COMPLETIONS`\n    );\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Chat Input Provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"higgins_public_chat_completion\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"chat_id\", chatId)\n      .order(\"created\", { ascending: true });\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(\n      `USER_ID: ${req?.body?.user_id} – POST HIGGINS PUBLIC COMPLETION`\n    );\n    const systemDirective = req?.body?.system_directive as string | undefined;\n    const userInput = req?.body?.user_input as string | undefined;\n    const messages =\n      (req?.body?.messages as\n        | { role: string; content: string }[]\n        | undefined) || [];\n    const userId = req?.body?.user_id as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    const temperature = req?.body?.chat_id as string | undefined;\n    const organization = req?.body?.organization as string | undefined;\n    if (!userInput) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No User Input Provided\" });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Invalid Request\" });\n      return;\n    }\n    if (!organization) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Organization Provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const docs = await getRelatedDocs(userInput, organization);\n    const supportingDocs = docs?.at(0)?.map((doc) => doc?.replace(\"\\n\", \" \"));\n    const defaultSystemDirective = `Your name is Higgins. You are a helpful assistant for the company ${organization}. I will provide you some supporting documents that you can use to help you respond to the user's next prompt. If the supporting documents do not closely relate to the user's prompt, ignore them as you formulate a response. If the user's prompt refers to any previous messages, ignore the supporting documents as you formulate a response. The following text is the supporting documents: ${supportingDocs}`;\n\n    const response = await axios.post(\n      `https://api.openai.com/v1/chat/completions`,\n      {\n        model: \"gpt-4-turbo-preview\",\n        messages: [\n          ...messages,\n          {\n            role: \"system\",\n            content: systemDirective\n              ? systemDirective + supportingDocs\n              : defaultSystemDirective,\n          },\n          { role: \"user\", content: userInput },\n        ],\n        temperature: temperature ? Number(temperature) : 0.7,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n        },\n      }\n    );\n    if (response.statusText === \"OK\") {\n      const completionData = response.data as OpenAiCompletion;\n\n      const { data, error } = await supabase\n        .from(\"higgins_public_chat_completion\")\n        .insert({\n          id: completionData.id,\n          object: completionData.object,\n          created: completionData.created,\n          model: completionData.model,\n          role: completionData.choices[0].message.role,\n          message: completionData.choices[0].message.content,\n          finish_reason: completionData.choices[0].finish_reason,\n          prompt_tokens: completionData.usage.prompt_tokens,\n          completion_tokens: completionData.usage.completion_tokens,\n          total_tokens: completionData.usage.total_tokens,\n          user_id: userId,\n          chat_id: chatId,\n          prompt: userInput,\n          documents: supportingDocs as string[] | null | undefined,\n        })\n        .select()\n        .single();\n      if (error) {\n        console.log(error);\n        res.status(500);\n        res.send({ ok: false, data: [], message: error.message });\n        return;\n      }\n      res.status(200);\n      res.send({ ok: true, data: data, message: \"success\" });\n    } else {\n      console.log(response.statusText);\n      res.status(500);\n      res.send({ ok: false, data: [], message: response.statusText });\n      return;\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").get(async (req, res) => {\n  try {\n    console.log(\n      `USER_ID: ${req?.query?.user_id} – GET HIGGINS PUBLIC COMPLETION`\n    );\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.params?.id as string | undefined;\n    const completionId = req?.params?.id;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Chat Input Provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"higgins_public_chat_completion\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"chat_id\", chatId)\n      .eq(\"id\", completionId)\n      .single();\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport completionRoute from \"./completion.route\";\nimport collectionRoute from \"./collection.route\";\nimport chatRoute from \"./chat.route\";\nimport higginsChatRoute from \"./higginsChat.route\";\nimport higginsCompletionRoute from \"./higginsCompletion.route\";\nimport feedbackRoute from \"./feedback.route\";\nimport organizationRoute from \"./organizations.route\";\n\nconst router = express.Router();\n\n/**\n * GET v1/public/status\n */\nrouter.get(\"/status\", (req, res) => res.send(\"PUBLIC OK\"));\nrouter.use(\"/completion\", completionRoute);\nrouter.use(\"/collection\", collectionRoute);\nrouter.use(\"/chat\", chatRoute);\nrouter.use(\"/higgins-chat\", higginsChatRoute);\nrouter.use(\"/higgins-completion\", higginsCompletionRoute);\nrouter.use(\"/feedback\", feedbackRoute);\nrouter.use(\"/organization\", organizationRoute);\n\nexport default router;\n","import express from \"express\";\nimport dotenv from \"dotenv\";\nimport { createClient } from \"../../../utils/utils\";\nimport jwt from \"jsonwebtoken\";\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET PUBLIC ORGANIZATIONS`);\n\n    const userId = req?.query?.user_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { data: organizations, error: organizationsError } = await supabase\n      .from(\"higgins_ai_public_organization\")\n      .select();\n\n    if (organizationsError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: organizationsError.message });\n      return;\n    }\n\n    if (organizations) {\n      res.status(200);\n      res.send({ ok: true, data: organizations, message: \"success\" });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: [], message: \"success\" });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").get(async (req, res) => {\n  try {\n    console.log(`USER_ID: ${req?.query?.user_id} – GET PUBLIC ORGANIZATION`);\n\n    const userId = req?.query?.user_id as string | undefined;\n    const organizationId = req?.params?.id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: organization, error: organizationError } = await supabase\n      .from(\"higgins_ai_public_organization\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"id\", organizationId)\n      .single();\n    if (organizationError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: organizationError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: organization, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nexport default router;\n","import { createServerClient } from '@supabase/ssr';\nimport { Database } from '../../types/supabase.types';\nimport cookieParser from 'cookie-parser';\nimport { Request, Response } from 'express';\nimport { ChromaClient, OpenAIEmbeddingFunction } from 'chromadb';\nimport { google } from 'googleapis';\nimport axios from 'axios';\nimport jsdom from 'jsdom';\n\nexport const createClient = (context: { req: Request; res: Response }, token?: string) => {\n  return createServerClient<Database>(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {\n    global: {\n      headers: {\n        Authorization: token ? `Bearer ${token}` : '',\n      },\n    },\n    cookies: {\n      get: (key) => {\n        if (!key) return;\n        const cookies = context.req.cookies;\n        const cookie = cookies[key] ?? '';\n        if (!cookie) return;\n        return decodeURIComponent(cookie);\n      },\n      set: (key, value, options) => {\n        if (!context.res) return;\n        context.res.cookie(key, encodeURIComponent(value), {\n          ...options,\n          sameSite: 'Lax',\n          httpOnly: true,\n        });\n      },\n      remove: (key, options) => {\n        if (!context.res) return;\n        context.res.cookie(key, '', { ...options, httpOnly: true });\n      },\n    },\n  });\n};\n\nexport const getRelatedDocs = async (inputString: string, organization: string) => {\n  try {\n    console.log(organization);\n    if (!organization) {\n      return undefined;\n    }\n    const chromaClient = new ChromaClient({\n      path: process.env.CHROMADB_PRO_URL,\n    });\n    const openAIEmbedder = new OpenAIEmbeddingFunction({\n      openai_api_key: process.env.OPENAI_API_KEY!,\n    });\n    const collection = await chromaClient.getCollection({\n      name: organization,\n      embeddingFunction: openAIEmbedder,\n    });\n    const documents = await collection.query({\n      queryTexts: inputString,\n      nResults: 5,\n    });\n    if (!documents.documents) {\n      return undefined;\n    }\n    // console.log(documents.documents);\n    return documents.documents;\n  } catch (error: any) {\n    console.log('GET RELATED DOCS ERROR');\n    console.log(error);\n    return undefined;\n  }\n};\n\nexport const customGoogleSearch = async (query: string) => {\n  const googleSearch = google.customsearch({\n    version: 'v1',\n  });\n  const searchResults = await googleSearch.cse.list({\n    q: query,\n    cx: process.env.GOOGLE_CUSTOM_SEARCH_ENGINE_ID,\n    key: process.env.GOOGLE_CLOUD_API_KEY,\n  });\n\n  return searchResults.data.items?.map((item) => {\n    return { displayLink: item.displayLink, link: item.link };\n  });\n};\n","import app from './api/config/express';\n\nconst PORT = process.env.PORT || 4000;\n\napp.listen(PORT, () => console.log('Listening on port ' + PORT));\n","module.exports = require(\"@supabase/ssr\");","module.exports = require(\"axios\");","module.exports = require(\"chromadb\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"googleapis\");","module.exports = require(\"jsonwebtoken\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(156);\n"],"names":["app","use","config","router","Router","route","get","req","res","console","log","query","user_id","userId","industry","status","send","ok","data","message","token","sign","sub","role","process","env","SUPABASE_JWT_SECRET","supabase","createClient","toLowerCase","chats","error","chatsError","from","select","eq","post","body","title","createdAt","created_at","chatId","chat_id","count","countError","like","length","newChat","newChatError","upsert","id","single","params","patch","chat","chatError","update","delete","chromaClient","ChromaClient","path","CHROMADB_PRO_URL","collections","listCollections","order","ascending","userInput","user_input","messages","industryName","industryError","docs","getRelatedDocs","name","supportingDocs","at","map","doc","replace","googleSearchResults","customGoogleSearch","response","model","content","system_directive","JSON","stringify","temperature","completion_temperature","headers","Authorization","OPENAI_API_KEY","statusText","completionData","object","created","choices","finish_reason","prompt_tokens","usage","completion_tokens","total_tokens","prompt","documents","completionId","completion_id","undefined","Error","ratingId","rating_id","rating","completion","Date","toISOString","organization","OpenAIEmbeddingFunction","openai_api_key","systemDirective","defaultSystemDirective","Number","insert","industries","industriesError","CHROMADB_PUBLIC_URL","organizationId","organization_id","openAIEmbedder","inputString","collection","getCollection","embeddingFunction","queryTexts","nResults","organizations","organizationsError","organizationError","context","createServerClient","SUPABASE_URL","SUPABASE_ANON_KEY","global","cookies","key","cookie","decodeURIComponent","set","value","options","encodeURIComponent","sameSite","httpOnly","remove","googleSearch","google","customsearch","version","cse","list","q","cx","GOOGLE_CUSTOM_SEARCH_ENGINE_ID","GOOGLE_CLOUD_API_KEY","items","item","displayLink","link","PORT","listen","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}