{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://higgins-ai-api/./src/api/config/express.ts","webpack://higgins-ai-api/./src/api/routes/v1/chat.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/collection.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/completion.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/feedback.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/higginsChat.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/higginsCompletion.route.ts","webpack://higgins-ai-api/./src/api/routes/v1/index.ts","webpack://higgins-ai-api/./src/api/utils/utils.ts","webpack://higgins-ai-api/./src/index.ts","webpack://higgins-ai-api/external commonjs \"@supabase/ssr\"","webpack://higgins-ai-api/external commonjs \"axios\"","webpack://higgins-ai-api/external commonjs \"chromadb\"","webpack://higgins-ai-api/external commonjs \"cookie-parser\"","webpack://higgins-ai-api/external commonjs \"cors\"","webpack://higgins-ai-api/external commonjs \"dotenv\"","webpack://higgins-ai-api/external commonjs \"express\"","webpack://higgins-ai-api/external commonjs \"jsonwebtoken\"","webpack://higgins-ai-api/webpack/bootstrap","webpack://higgins-ai-api/webpack/startup"],"sourcesContent":["import express from \"express\";\nimport cors from \"cors\";\nimport { json as _json } from \"express\";\nimport router from \"../routes/v1\";\nimport cookies from \"cookie-parser\";\n\n/**\n * Express instance\n * @public\n */\nconst app = express();\n\n// enable CORS - Cross Origin Resource Sharing\napp.use(cors());\napp.use(_json());\napp.use(cookies());\n\n// mount api v1 routes\napp.use(\"/api/v1\", router);\n\nexport default app;\n","import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookie from \"cookie-parser\";\nimport { createClient } from \"../../utils/utils\";\nimport jwt from \"jsonwebtoken\";\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(\"GET CHATS\");\n\n    const userId = req?.query?.user_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { data: chats, error: chatsError } = await supabase\n      .from(\"chat\")\n      .select()\n      .eq(\"user_id\", userId);\n\n    if (chatsError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatsError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chats, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(\"POST CHAT\");\n    let title = (req?.body?.title as string | undefined) || \"New Chat\";\n    const userId = req?.body?.user_id as string | undefined;\n    const createdAt = req?.body?.created_at as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: count, error: countError } = await supabase\n      .from(\"chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .like(\"title\", `%${title}%`);\n    if (countError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: countError.message });\n      return;\n    }\n    if (count && count.length > 1) {\n      title += ` ${count.length}`;\n    }\n    const { data: newChat, error: newChatError } = await supabase\n      .from(\"chat\")\n      .upsert({ id: chatId, created_at: createdAt, user_id: userId, title })\n      .select()\n      .single();\n    if (newChatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: newChatError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: newChat, message: \"success\" });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").get(async (req, res) => {\n  try {\n    console.log(\"GET CHAT\");\n\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.params?.id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chats, error: chatsError } = await supabase\n      .from(\"chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"id\", chatId)\n      .single();\n    if (chatsError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatsError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chats, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").patch(async (req, res) => {\n  try {\n    console.log(\"PATCH CHAT\");\n\n    const title = req?.body?.title as string | undefined;\n    const chatId = req?.params?.id;\n    const userId = req?.body?.user_id as string | undefined;\n\n    if (!title) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Invalid Request\" });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chat, error: chatError } = await supabase\n      .from(\"chat\")\n      .update({ title })\n      .eq(\"id\", chatId)\n      .select()\n      .single();\n    if (chatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chat, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").delete(async (req, res) => {\n  try {\n    console.log(\"DELETE CHAT\");\n    const chatId = req?.params?.id;\n    const userId = req?.query?.user_id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { error } = await supabase\n      .from(\"chat\")\n      .delete()\n      .eq(\"id\", chatId)\n      .eq(\"user_id\", userId)\n      .single();\n    if (error) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: [], message: \"success\" });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n\n    return;\n  }\n});\n\nexport default router;\n","import { ChromaClient } from \"chromadb\";\nimport express from \"express\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst router = express.Router();\n\nconst chromaClient = new ChromaClient({\n  path: process.env.CHROMADB_URL,\n});\n\nrouter.route(\"/\").get(async (req, res) => {\n  const collections = await chromaClient.listCollections();\n  if (collections && collections.length > 0) {\n    res.send(collections);\n  }\n});\n\nexport default router;\n","import { ChromaClient, OpenAIEmbeddingFunction } from \"chromadb\";\nimport express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookieParser from \"cookie-parser\";\nimport axios from \"axios\";\nimport { createClient } from \"../../utils/utils\";\nimport { OpenAiCompletion } from \"../../../types/types\";\nimport jwt from \"jsonwebtoken\";\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(\"GET COMPLETIONS\");\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Chat Input Provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"chat_completion\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"chat_id\", chatId)\n      .order(\"created\", { ascending: true });\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(\"POST COMPLETION\");\n    const userInput = req?.body?.user_input as string | undefined;\n    const messages =\n      (req?.body?.messages as\n        | { role: string; content: string }[]\n        | undefined) || [];\n    const userId = req?.body?.user_id as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    if (!userInput) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No User Input Provided\" });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Invalid Request\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const response = await axios.post(\n      `https://api.openai.com/v1/chat/completions`,\n      {\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          ...messages,\n          {\n            role: \"system\",\n            content: \"You are a helpful assistant\",\n          },\n          { role: \"user\", content: userInput },\n        ],\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n        },\n      }\n    );\n    if (response.statusText === \"OK\") {\n      const completionData = response.data as OpenAiCompletion;\n      const { data, error } = await supabase\n        .from(\"chat_completion\")\n        .upsert({\n          id: completionData.id,\n          object: completionData.object,\n          created: completionData.created,\n          model: completionData.model,\n          role: completionData.choices[0].message.role,\n          message: completionData.choices[0].message.content,\n          finish_reason: completionData.choices[0].finish_reason,\n          prompt_tokens: completionData.usage.prompt_tokens,\n          completion_tokens: completionData.usage.completion_tokens,\n          total_tokens: completionData.usage.total_tokens,\n          user_id: userId,\n          chat_id: chatId,\n          prompt: userInput,\n        })\n        .select()\n        .single();\n      if (error) {\n        console.log(error);\n        res.status(500);\n        res.send({ ok: false, data: [], message: error.message });\n        return;\n      }\n      res.status(200);\n      res.send({ ok: true, data: data, message: \"success\" });\n    } else {\n      console.log(response.statusText);\n      res.status(500);\n      res.send({ ok: false, data: [], message: response.statusText });\n      return;\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").get(async (req, res) => {\n  try {\n    console.log(\"GET COMPLETION\");\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n    const completionId = req?.params?.id;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Chat Input Provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"chat_completion\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"chat_id\", chatId)\n      .eq(\"id\", completionId)\n      .single();\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookie from \"cookie-parser\";\nimport { createClient } from \"../../utils/utils\";\nimport jwt from \"jsonwebtoken\";\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(\"GET FEEDBACK\");\n    const userId = req?.query?.user_id as string | undefined;\n    const completionId = req?.query?.completion_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: undefined,\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!completionId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: undefined,\n        message: \"No Completions ID provided\",\n      });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: undefined,\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"completion_feedback\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"completion_id\", completionId)\n      .eq(\"chat_id\", chatId);\n    if (!error) {\n      res.status(200);\n      res.send({ ok: true, data: data, message: \"success\" });\n      return;\n    } else {\n      throw new Error(error.message);\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(\"POST FEEDBACK\");\n    const userId = req?.body?.user_id as string | undefined;\n    const completionId = req?.body?.completion_id as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    const ratingId = req?.body?.rating_id as string | undefined;\n    const rating = req?.body?.rating as string | undefined;\n    const prompt = req?.body?.prompt as string | undefined;\n    const completion = req?.body?.completion as string | undefined;\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!ratingId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Rating ID provided\",\n      });\n      return;\n    }\n    if (!rating) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Rating provided\",\n      });\n      return;\n    }\n    if (!completionId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Completion ID provided\",\n      });\n      return;\n    }\n    if (!completion) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Completion provided\",\n      });\n      return;\n    }\n    if (!prompt) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Prompt provided\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"completion_feedback\")\n      .upsert([\n        {\n          user_id: userId,\n          id: ratingId,\n          chat_id: chatId,\n          completion_id: completionId,\n          created_at: new Date().toISOString(),\n          rating,\n          prompt,\n          completion,\n        },\n      ])\n      .select()\n      .single();\n    if (data) {\n      res.status(200);\n      res.send({ ok: true, data: data, message: \"success\" });\n      return;\n    }\n    if (error) {\n      throw new Error(error.message);\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").delete(async (req, res) => {\n  try {\n    console.log(\"DELETE FEEDBACK\");\n    const userId = req?.query?.user_id as string | undefined;\n    const completionId = req?.query?.completion_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!completionId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Completions ID provided\",\n      });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { error } = await supabase\n      .from(\"completion_feedback\")\n      .delete()\n      .eq(\"user_id\", userId)\n      .eq(\"completion_id\", completionId)\n      .eq(\"chat_id\", chatId)\n      .single();\n    if (!error) {\n      res.status(200);\n      res.send({ ok: true, data: [], message: \"success\" });\n      return;\n    }\n    if (error) {\n      throw new Error(error.message);\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookie from \"cookie-parser\";\nimport { createClient } from \"../../utils/utils\";\nimport jwt from \"jsonwebtoken\";\n\ndotenv.config();\n\nconst router = express.Router();\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(\"GET HIGGINS CHATS\");\n    const userId = req?.query?.user_id as string | undefined;\n    const organization = req?.query?.organization as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!organization) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Organization provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chats, error: chatsError } = await supabase\n      .from(\"higgins_chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"organization\", organization)\n      .order(\"created_at\", { ascending: true });\n    if (chatsError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatsError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chats, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(\"POST HIGGINS CHAT\");\n\n    let title = (req?.body?.title as string | undefined) || \"New Chat\";\n    const userId = req?.body?.user_id as string | undefined;\n    const createdAt = req?.body?.created_at as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    const organization = req?.body?.organization as string | undefined;\n\n    if (!userId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Authentication Error\",\n      });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"Invalid Request\",\n      });\n      return;\n    }\n    if (!organization) {\n      res.status(400);\n      res.send({\n        ok: false,\n        data: [],\n        message: \"No Organization provided\",\n      });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { data: count, error: countError } = await supabase\n      .from(\"higgins_chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"organization\", organization)\n      .like(\"title\", `%${title}%`);\n    if (countError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: countError.message });\n      return;\n    }\n    if (count && count.length > 1) {\n      title += ` ${count.length}`;\n    }\n    const { data: newChat, error: newChatError } = await supabase\n      .from(\"higgins_chat\")\n      .upsert({\n        id: chatId,\n        created_at: createdAt,\n        user_id: userId,\n        organization,\n        title,\n      })\n      .select()\n      .single();\n    if (newChatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: newChatError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: newChat, message: \"success\" });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").get(async (req, res) => {\n  try {\n    console.log(\"GET HIGGINS CHAT\");\n\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.params?.id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chats, error: chatsError } = await supabase\n      .from(\"higgins_chat\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"id\", chatId)\n      .single();\n    if (chatsError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatsError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chats, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").patch(async (req, res) => {\n  try {\n    console.log(\"PATCH HIGGINS CHAT\");\n\n    const title = req?.body?.title as string | undefined;\n    const chatId = req?.params?.id;\n    const userId = req?.body.user_id as string | undefined;\n\n    if (!title) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Invalid Request\" });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data: chat, error: chatError } = await supabase\n      .from(\"higgins_chat\")\n      .update({ title })\n      .eq(\"id\", chatId)\n      .select()\n      .single();\n    if (chatError) {\n      res.status(500);\n      res.send({ ok: false, data: [], message: chatError.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: chat, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").delete(async (req, res) => {\n  try {\n    console.log(\"DELETE HIGGINS CHAT\");\n    const chatId = req?.params?.id;\n    const userId = req?.query?.user_id;\n\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const { error } = await supabase\n      .from(\"higgins_chat\")\n      .delete()\n      .eq(\"id\", chatId)\n      .eq(\"user_id\", userId)\n      .single();\n    if (error) {\n      console.log(res);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: [], message: \"success\" });\n    return;\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n\n    return;\n  }\n});\n\nexport default router;\n","import { ChromaClient, OpenAIEmbeddingFunction } from \"chromadb\";\nimport express from \"express\";\nimport dotenv from \"dotenv\";\nimport cookieParser from \"cookie-parser\";\nimport axios from \"axios\";\nimport { createClient } from \"../../utils/utils\";\nimport { OpenAiCompletion } from \"../../../types/types\";\nimport jwt from \"jsonwebtoken\";\ndotenv.config();\n\nconst router = express.Router();\n\nconst chromaClient = new ChromaClient({\n  path: process.env.CHROMADB_URL,\n});\nconst openAIEmbedder = new OpenAIEmbeddingFunction({\n  openai_api_key: process.env.OPENAI_API_KEY!,\n});\n\nconst getRelatedDocs = async (inputString: string, organization: string) => {\n  const collection = await chromaClient.getCollection({\n    name: organization,\n    embeddingFunction: openAIEmbedder,\n  });\n  const documents = await collection.query({\n    queryTexts: inputString,\n    nResults: 5,\n  });\n  if (!documents.documents) {\n    return undefined;\n  }\n  return documents.documents;\n};\n\nrouter.route(\"/\").get(async (req, res) => {\n  try {\n    console.log(\"GET HIGGINS COMPLETIONS\");\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.query?.chat_id as string | undefined;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Chat Input Provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"higgins_chat_completion\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"chat_id\", chatId)\n      .order(\"created\", { ascending: true });\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/\").post(async (req, res) => {\n  try {\n    console.log(\"POST HIGGINS COMPLETION\");\n    const systemDirective = req?.body?.system_directive as string | undefined;\n    const userInput = req?.body?.user_input as string | undefined;\n    const messages =\n      (req?.body?.messages as\n        | { role: string; content: string }[]\n        | undefined) || [];\n    const userId = req?.body?.user_id as string | undefined;\n    const chatId = req?.body?.chat_id as string | undefined;\n    const temperature = req?.body?.chat_id as string | undefined;\n    const organization = req?.body?.organization as string | undefined;\n    if (!userInput) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No User Input Provided\" });\n      return;\n    }\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Invalid Request\" });\n      return;\n    }\n    if (!organization) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Organization Provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n\n    const docs = await getRelatedDocs(userInput, organization);\n    const supportingDocs = docs?.at(0)?.map((doc) => doc?.replace(\"\\n\", \" \"));\n    const defaultSystemDirective = `Your name is Higgins. You are a helpful assistant for the company ${organization}. I will provide you some supporting documents that you can use to help you respond to the user's next prompt. If the supporting documents do not closely relate to the user's prompt, ignore them as you formulate a response. If the user's prompt refers to any previous messages, ignore the supporting documents as you formulate a response. The following text is the supporting documents: ${supportingDocs}`;\n\n    const response = await axios.post(\n      `https://api.openai.com/v1/chat/completions`,\n      {\n        model: \"gpt-3.5-turbo-16k\",\n        messages: [\n          ...messages,\n          {\n            role: \"system\",\n            content: systemDirective\n              ? systemDirective + supportingDocs\n              : defaultSystemDirective,\n          },\n          { role: \"user\", content: userInput },\n        ],\n        temperature: temperature ? Number(temperature) : 0.7,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n        },\n      }\n    );\n    if (response.statusText === \"OK\") {\n      const completionData = response.data as OpenAiCompletion;\n\n      const { data, error } = await supabase\n        .from(\"higgins_chat_completion\")\n        .insert({\n          id: completionData.id,\n          object: completionData.object,\n          created: completionData.created,\n          model: completionData.model,\n          role: completionData.choices[0].message.role,\n          message: completionData.choices[0].message.content,\n          finish_reason: completionData.choices[0].finish_reason,\n          prompt_tokens: completionData.usage.prompt_tokens,\n          completion_tokens: completionData.usage.completion_tokens,\n          total_tokens: completionData.usage.total_tokens,\n          user_id: userId,\n          chat_id: chatId,\n          prompt: userInput,\n          documents: supportingDocs as string[] | null | undefined,\n        })\n        .select()\n        .single();\n      if (error) {\n        console.log(error);\n        res.status(500);\n        res.send({ ok: false, data: [], message: error.message });\n        return;\n      }\n      res.status(200);\n      res.send({ ok: true, data: data, message: \"success\" });\n    } else {\n      console.log(response.statusText);\n      res.status(500);\n      res.send({ ok: false, data: [], message: response.statusText });\n      return;\n    }\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nrouter.route(\"/:id\").get(async (req, res) => {\n  try {\n    const userId = req?.query?.user_id as string | undefined;\n    const chatId = req?.params?.id as string | undefined;\n    const completionId = req?.params?.id;\n    if (!userId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"Authentication Error\" });\n      return;\n    }\n    if (!chatId) {\n      res.status(400);\n      res.send({ ok: false, data: [], message: \"No Chat Input Provided\" });\n      return;\n    }\n    const token = jwt.sign(\n      { sub: userId, role: \"authenticated\" },\n      process.env.SUPABASE_JWT_SECRET!\n    );\n    const supabase = createClient({ req, res }, token);\n    const { data, error } = await supabase\n      .from(\"higgins_chat_completion\")\n      .select()\n      .eq(\"user_id\", userId)\n      .eq(\"chat_id\", chatId)\n      .eq(\"id\", completionId)\n      .single();\n    if (error) {\n      console.log(error);\n      res.status(500);\n      res.send({ ok: false, data: [], message: error.message });\n      return;\n    }\n    res.status(200);\n    res.send({ ok: true, data: data, message: \"success\" });\n  } catch (error: any) {\n    console.log(error);\n    res.status(500);\n    res.send({ ok: false, data: [], message: \"Something went wrong\" });\n    return;\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport completionRoute from \"./completion.route\";\nimport collectionRoute from \"./collection.route\";\nimport chatRoute from \"./chat.route\";\nimport higginsChatRoute from \"./higginsChat.route\";\nimport higginsCompletionRoute from \"./higginsCompletion.route\";\nimport feedbackRoute from \"./feedback.route\";\n\nconst router = express.Router();\n\n/**\n * GET v1/status\n */\nrouter.get(\"/status\", (req, res) => res.send(\"OK\"));\nrouter.use(\"/completion\", completionRoute);\nrouter.use(\"/collection\", collectionRoute);\nrouter.use(\"/chat\", chatRoute);\nrouter.use(\"/higgins-chat\", higginsChatRoute);\nrouter.use(\"/higgins-completion\", higginsCompletionRoute);\nrouter.use(\"/feedback\", feedbackRoute);\n\nexport default router;\n","import { createServerClient } from \"@supabase/ssr\";\nimport { Database } from \"../../types/supabase.types\";\nimport cookieParser from \"cookie-parser\";\nimport { Request, Response } from \"express\";\n\nexport const createClient = (\n  context: { req: Request; res: Response },\n  token?: string\n) => {\n  return createServerClient<Database>(\n    process.env.SUPABASE_URL!,\n    process.env.SUPABASE_ANON_KEY!,\n    {\n      global: {\n        headers: {\n          Authorization: token ? `Bearer ${token}` : \"\",\n        },\n      },\n      cookies: {\n        get: (key) => {\n          if (!key) return;\n          const cookies = context.req.cookies;\n          const cookie = cookies[key] ?? \"\";\n          if (!cookie) return;\n          return decodeURIComponent(cookie);\n        },\n        set: (key, value, options) => {\n          if (!context.res) return;\n          context.res.cookie(key, encodeURIComponent(value), {\n            ...options,\n            sameSite: \"Lax\",\n            httpOnly: true,\n          });\n        },\n        remove: (key, options) => {\n          if (!context.res) return;\n          context.res.cookie(key, \"\", { ...options, httpOnly: true });\n        },\n      },\n    }\n  );\n};\n","import app from \"./api/config/express\";\n\nconst PORT = process.env.PORT || 4000;\n\napp.listen(PORT, () => console.log(\"Listening on port \" + PORT));\n","module.exports = require(\"@supabase/ssr\");","module.exports = require(\"axios\");","module.exports = require(\"chromadb\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"jsonwebtoken\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(156);\n"],"names":["app","use","config","router","Router","route","get","req","res","console","log","userId","query","user_id","status","send","ok","data","message","token","sign","sub","role","process","env","SUPABASE_JWT_SECRET","supabase","createClient","chats","error","chatsError","from","select","eq","post","title","body","createdAt","created_at","chatId","chat_id","count","countError","like","length","newChat","newChatError","upsert","id","single","params","patch","chat","chatError","update","delete","chromaClient","ChromaClient","path","CHROMADB_URL","collections","listCollections","order","ascending","userInput","user_input","messages","response","model","content","headers","Authorization","OPENAI_API_KEY","statusText","completionData","object","created","choices","finish_reason","prompt_tokens","usage","completion_tokens","total_tokens","prompt","completionId","completion_id","undefined","Error","ratingId","rating_id","rating","completion","Date","toISOString","organization","openAIEmbedder","OpenAIEmbeddingFunction","openai_api_key","systemDirective","system_directive","temperature","docs","inputString","collection","getCollection","name","embeddingFunction","documents","queryTexts","nResults","getRelatedDocs","supportingDocs","at","map","doc","replace","defaultSystemDirective","Number","insert","context","createServerClient","SUPABASE_URL","SUPABASE_ANON_KEY","global","cookies","key","cookie","decodeURIComponent","set","value","options","encodeURIComponent","sameSite","httpOnly","remove","PORT","listen","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}